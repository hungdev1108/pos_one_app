import { apiClient } from "../client";
import {
  CreateOrderRequest,
  CreateOrderResponse,
  FnBConfig,
  KitchenPrintData,
  OrderDetail,
  OrderListItem,
  OrderOperationResponse,
  OrderProductRequest,
  OrdersListResponse,
  OrdersRequestParams,
  PrintOrderData,
  UpdateOrderRequest
} from "../types";

/**
 * Orders Service cho F&B System
 * Qu·∫£n l√Ω ƒë∆°n h√†ng theo t·ª´ng tr·∫°ng th√°i: M·ªõi, X√°c nh·∫≠n, Ph·ª•c v·ª•, Thanh to√°n, H·ªßy
 */
class OrdersService {
  private baseUrl = "/api/orders";
  private configUrl = "/api/warehouses/configs";

  // ===== LOAD CONFIGS =====
  /**
   * L·∫•y c·∫•u h√¨nh F&B quan tr·ªçng
   */
  async getFnBConfigs(): Promise<FnBConfig> {
    try {
      const response = await apiClient.get<any>(
        `${this.configUrl}/list/LoaiHinhKinhDoanh,LoaiFnB,LoaiThue`
      );

      // Ki·ªÉm tra c·∫•u tr√∫c response
      console.log("üçΩÔ∏è Config response:", response);
      
      // Ki·ªÉm tra n·∫øu response tr·ª±c ti·∫øp ch·ª©a c√°c gi√° tr·ªã c·∫•u h√¨nh
      if (response && response.LoaiFnB && response.LoaiHinhKinhDoanh) {
        return {
          LoaiHinhKinhDoanh: Number(response.LoaiHinhKinhDoanh || "2"), // Default F&B
          LoaiFnB: Number(response.LoaiFnB || "1"), // Default thanh to√°n t·∫°i qu·∫ßy
          LoaiThue: Number(response.LoaiThue || "0"), // Default 0% VAT
        };
      }
      
      // N·∫øu response c√≥ c·∫•u tr√∫c { data: { LoaiFnB, LoaiHinhKinhDoanh, LoaiThue } }
      if (response && response.data) {
        const config = response.data;
        return {
          LoaiHinhKinhDoanh: Number(config.LoaiHinhKinhDoanh || "2"), // Default F&B
          LoaiFnB: Number(config.LoaiFnB || "1"), // Default thanh to√°n t·∫°i qu·∫ßy
          LoaiThue: Number(config.LoaiThue || "0"), // Default 0% VAT
        };
      }
      
      // N·∫øu response c√≥ c·∫•u tr√∫c { data: { data: { LoaiFnB, ... } } }
      if (response && response.data && response.data.data) {
        const config = response.data.data;
        return {
          LoaiHinhKinhDoanh: Number(config.LoaiHinhKinhDoanh || "2"),
          LoaiFnB: Number(config.LoaiFnB || "1"),
          LoaiThue: Number(config.LoaiThue || "0"),
        };
      }

      console.error("‚ùå Kh√¥ng t√¨m th·∫•y c·∫•u tr√∫c c·∫•u h√¨nh F&B h·ª£p l·ªá:", response);
      throw new Error("Kh√¥ng th·ªÉ l·∫•y c·∫•u h√¨nh F&B");
    } catch (error: any) {
      console.error("‚ùå Error loading F&B configs:", error);
      // Return default config if API fails
      return {
        LoaiHinhKinhDoanh: 2,
        LoaiFnB: 1,
        LoaiThue: 0,
      };
    }
  }

  // ===== LOAD ORDERS BY STATUS =====
  /**
   * L·∫•y danh s√°ch ƒë∆°n h√†ng m·ªõi (ch∆∞a x√°c nh·∫≠n)
   */
  async getNewOrders(params: OrdersRequestParams): Promise<OrdersListResponse> {
    try {
      const response = await apiClient.get<any>(
        `${this.baseUrl}/news`,
        { params }
      );

      console.log("üîÑ New orders response:", response);

      // Tr∆∞·ªùng h·ª£p 1: Ph·∫£n h·ªìi tr·ª±c ti·∫øp l√† OrdersListResponse
      if (response && response.items && Array.isArray(response.items)) {
        return response;
      }

      // Tr∆∞·ªùng h·ª£p 2: Ph·∫£n h·ªìi d·∫°ng { data: OrdersListResponse }
      if (response && response.data && response.data.items && Array.isArray(response.data.items)) {
        return response.data;
      }

      // Tr∆∞·ªùng h·ª£p 3: Ph·∫£n h·ªìi d·∫°ng { data: { data: OrdersListResponse } }
      if (response && response.data && response.data.data && response.data.data.items) {
        return response.data.data;
      }

      console.error("‚ùå C·∫•u tr√∫c ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá cho ƒë∆°n h√†ng m·ªõi:", response);
      throw new Error("L·ªói khi t·∫£i ƒë∆°n h√†ng m·ªõi: C·∫•u tr√∫c ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá");
    } catch (error: any) {
      console.error("‚ùå Error loading new orders:", error);
      // Return empty response instead of throwing
      return {
        items: [],
        metaData: {
          currentPage: 1,
          totalPages: 0,
          pageSize: 15,
          totalCount: 0,
        },
      };
    }
  }

  /**
   * L·∫•y danh s√°ch ƒë∆°n h√†ng ƒë√£ x√°c nh·∫≠n
   */
  async getConfirmedOrders(
    params: OrdersRequestParams
  ): Promise<OrdersListResponse> {
    try {
      const response = await apiClient.get<any>(
        `${this.baseUrl}/confirms`,
        { params }
      );

      console.log("üîÑ Confirmed orders response:", response);

      // Tr∆∞·ªùng h·ª£p 1: Ph·∫£n h·ªìi tr·ª±c ti·∫øp l√† OrdersListResponse
      if (response && response.items && Array.isArray(response.items)) {
        return response;
      }

      // Tr∆∞·ªùng h·ª£p 2: Ph·∫£n h·ªìi d·∫°ng { data: OrdersListResponse }
      if (response && response.data && response.data.items && Array.isArray(response.data.items)) {
        return response.data;
      }

      // Tr∆∞·ªùng h·ª£p 3: Ph·∫£n h·ªìi d·∫°ng { data: { data: OrdersListResponse } }
      if (response && response.data && response.data.data && response.data.data.items) {
        return response.data.data;
      }

      console.error("‚ùå C·∫•u tr√∫c ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá cho ƒë∆°n h√†ng ƒë√£ x√°c nh·∫≠n:", response);
      throw new Error("L·ªói khi t·∫£i ƒë∆°n h√†ng ƒë√£ x√°c nh·∫≠n: C·∫•u tr√∫c ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá");
    } catch (error: any) {
      console.error("‚ùå Error loading confirmed orders:", error);
      return {
        items: [],
        metaData: {
          currentPage: 1,
          totalPages: 0,
          pageSize: 15,
          totalCount: 0,
        },
      };
    }
  }

  /**
   * L·∫•y danh s√°ch ƒë∆°n h√†ng t·∫°m t√≠nh (ƒë√£ ph·ª•c v·ª•, ch·ªù thanh to√°n)
   */
  async getSentOrders(params: OrdersRequestParams): Promise<OrdersListResponse> {
    try {
      const response = await apiClient.get<any>(
        `${this.baseUrl}/sends`,
        { params }
      );

      console.log("üîÑ Sent orders response:", response);

      // Tr∆∞·ªùng h·ª£p 1: Ph·∫£n h·ªìi tr·ª±c ti·∫øp l√† OrdersListResponse
      if (response && response.items && Array.isArray(response.items)) {
        return response;
      }

      // Tr∆∞·ªùng h·ª£p 2: Ph·∫£n h·ªìi d·∫°ng { data: OrdersListResponse }
      if (response && response.data && response.data.items && Array.isArray(response.data.items)) {
        return response.data;
      }

      // Tr∆∞·ªùng h·ª£p 3: Ph·∫£n h·ªìi d·∫°ng { data: { data: OrdersListResponse } }
      if (response && response.data && response.data.data && response.data.data.items) {
        return response.data.data;
      }

      console.error("‚ùå C·∫•u tr√∫c ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá cho ƒë∆°n h√†ng t·∫°m t√≠nh:", response);
      throw new Error("L·ªói khi t·∫£i ƒë∆°n h√†ng t·∫°m t√≠nh: C·∫•u tr√∫c ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá");
    } catch (error: any) {
      console.error("‚ùå Error loading sent orders:", error);
      return {
        items: [],
        metaData: {
          currentPage: 1,
          totalPages: 0,
          pageSize: 15,
          totalCount: 0,
        },
      };
    }
  }

  /**
   * L·∫•y danh s√°ch ƒë∆°n h√†ng ƒë√£ thanh to√°n
   */
  async getReceivedOrders(
    params: OrdersRequestParams
  ): Promise<OrdersListResponse> {
    try {
      const response = await apiClient.get<any>(
        `${this.baseUrl}/receives`,
        { params }
      );

      console.log("üîÑ Received orders response:", response);

      // Tr∆∞·ªùng h·ª£p 1: Ph·∫£n h·ªìi tr·ª±c ti·∫øp l√† OrdersListResponse
      if (response && response.items && Array.isArray(response.items)) {
        return response;
      }

      // Tr∆∞·ªùng h·ª£p 2: Ph·∫£n h·ªìi d·∫°ng { data: OrdersListResponse }
      if (response && response.data && response.data.items && Array.isArray(response.data.items)) {
        return response.data;
      }

      // Tr∆∞·ªùng h·ª£p 3: Ph·∫£n h·ªìi d·∫°ng { data: { data: OrdersListResponse } }
      if (response && response.data && response.data.data && response.data.data.items) {
        return response.data.data;
      }

      console.error("‚ùå C·∫•u tr√∫c ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá cho ƒë∆°n h√†ng ƒë√£ thanh to√°n:", response);
      throw new Error("L·ªói khi t·∫£i ƒë∆°n h√†ng ƒë√£ thanh to√°n: C·∫•u tr√∫c ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá");
    } catch (error: any) {
      console.error("‚ùå Error loading received orders:", error);
      return {
        items: [],
        metaData: {
          currentPage: 1,
          totalPages: 0,
          pageSize: 15,
          totalCount: 0,
        },
      };
    }
  }

  /**
   * L·∫•y danh s√°ch ƒë∆°n h√†ng ƒë√£ h·ªßy
   */
  async getCancelledOrders(
    params: OrdersRequestParams
  ): Promise<OrdersListResponse> {
    try {
      const response = await apiClient.get<any>(
        `${this.baseUrl}/cancels`,
        { params }
      );

      console.log("üîÑ Cancelled orders response:", response);

      // Tr∆∞·ªùng h·ª£p 1: Ph·∫£n h·ªìi tr·ª±c ti·∫øp l√† OrdersListResponse
      if (response && response.items && Array.isArray(response.items)) {
        return response;
      }

      // Tr∆∞·ªùng h·ª£p 2: Ph·∫£n h·ªìi d·∫°ng { data: OrdersListResponse }
      if (response && response.data && response.data.items && Array.isArray(response.data.items)) {
        return response.data;
      }

      // Tr∆∞·ªùng h·ª£p 3: Ph·∫£n h·ªìi d·∫°ng { data: { data: OrdersListResponse } }
      if (response && response.data && response.data.data && response.data.data.items) {
        return response.data.data;
      }

      console.error("‚ùå C·∫•u tr√∫c ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá cho ƒë∆°n h√†ng ƒë√£ h·ªßy:", response);
      throw new Error("L·ªói khi t·∫£i ƒë∆°n h√†ng ƒë√£ h·ªßy: C·∫•u tr√∫c ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá");
    } catch (error: any) {
      console.error("‚ùå Error loading cancelled orders:", error);
      return {
        items: [],
        metaData: {
          currentPage: 1,
          totalPages: 0,
          pageSize: 15,
          totalCount: 0,
        },
      };
    }
  }

  // ===== ORDER DETAILS =====
  /**
   * L·∫•y chi ti·∫øt ƒë∆°n h√†ng
   */
  async getOrderDetail(orderId: string): Promise<OrderDetail> {
    try {
      const response = await apiClient.get<OrderDetail>(
        `${this.baseUrl}/${orderId}/detail`
      );

      if (response && typeof response === 'object') {
        return response;
      }

      throw new Error("L·ªói khi t·∫£i chi ti·∫øt ƒë∆°n h√†ng");
    } catch (error: any) {
      console.error("‚ùå Error loading order detail:", error);
      throw error;
    }
  }

  /**
   * L·∫•y danh s√°ch s·∫£n ph·∫©m trong ƒë∆°n h√†ng
   */
  async getOrderProducts(orderId: string): Promise<any[]> {
    try {
      const response = await apiClient.get<any>(
        `${this.baseUrl}/${orderId}/products`
      );

      if (Array.isArray(response)) {
        return response;
      } else if (response && typeof response === 'object' && Array.isArray(response.data)) {
        return response.data;
      }

      throw new Error("L·ªói khi t·∫£i s·∫£n ph·∫©m ƒë∆°n h√†ng");
    } catch (error: any) {
      console.error("‚ùå Error loading order products:", error);
      throw error;
    }
  }

  /**
   * L·∫•y s·∫£n ph·∫©m ch∆∞a in (ch·∫ø bi·∫øn)
   */
  async getUnprintedProducts(orderId: string): Promise<any[]> {
    try {
      const response = await apiClient.get<any>(
        `${this.baseUrl}/${orderId}/products/unprinted`
      );

      if (Array.isArray(response)) {
        return response;
      } else if (response && typeof response === 'object' && Array.isArray(response.data)) {
        return response.data;
      }

      throw new Error("L·ªói khi t·∫£i s·∫£n ph·∫©m ch∆∞a in");
    } catch (error: any) {
      console.error("‚ùå Error loading unprinted products:", error);
      throw error;
    }
  }

  // ===== ORDER OPERATIONS =====
  /**
   * X√°c nh·∫≠n ƒë∆°n h√†ng
   */
  async confirmOrder(orderId: string): Promise<OrderOperationResponse> {
    console.log("üîÑ Confirm order:", orderId);
    try {
      const response = await apiClient.post<OrderOperationResponse>(
        `${this.baseUrl}/${orderId}/confirm`,
        {},
        {
          headers: {
            'x-http-method-override': 'PUT',
          },
        }
      );

      console.log("‚úÖ Confirm order response:", response);
      
      // apiClient ƒë√£ x·ª≠ l√Ω ƒë·∫∑c bi·ªát n·∫øu response l√† r·ªóng
      if (response.successful) {
        return response;
      }

      throw new Error(response.error || "L·ªói khi x√°c nh·∫≠n ƒë∆°n h√†ng");
    } catch (error: any) {
      console.error("‚ùå Error confirming order:", error);
      throw error;
    }
  }

  /**
   * G·ª≠i ƒë∆°n h√†ng (ph·ª•c v·ª•) - Logic ƒë·∫∑c bi·ªát cho F&B
   * - N·∫øu LoaiFnB = 1 (thanh to√°n t·∫°i qu·∫ßy): t·ª± ƒë·ªông chuy·ªÉn th√†nh "ƒë√£ thanh to√°n"
   * - N·∫øu LoaiFnB = 2 (thanh to√°n t·∫°i b√†n): chuy·ªÉn th√†nh "t·∫°m t√≠nh"
   */
  async sendOrder(orderId: string): Promise<OrderOperationResponse> {
    try {
      const response = await apiClient.put<OrderOperationResponse>(
        `${this.baseUrl}/${orderId}/send`
      );

      if (response.data?.successful) {
        return response.data;
      }

      throw new Error(response.data?.error || "L·ªói khi g·ª≠i ƒë∆°n h√†ng");
    } catch (error: any) {
      console.error("‚ùå Error sending order:", error);
      throw error;
    }
  }

  /**
   * Thanh to√°n ƒë∆°n h√†ng
   */
  async receiveOrder(orderId: string): Promise<OrderOperationResponse> {
    try {
      const response = await apiClient.put<OrderOperationResponse>(
        `${this.baseUrl}/${orderId}/receive`
      );

      if (response.data?.successful) {
        return response.data;
      }

      throw new Error(response.data?.error || "L·ªói khi thanh to√°n ƒë∆°n h√†ng");
    } catch (error: any) {
      console.error("‚ùå Error receiving payment for order:", error);
      throw error;
    }
  }

  /**
   * H·ªßy ƒë∆°n h√†ng
   */
  async cancelOrder(orderId: string): Promise<OrderOperationResponse> {
    try {
      const response = await apiClient.put<OrderOperationResponse>(
        `${this.baseUrl}/${orderId}/cancel`
      );

      if (response.data?.successful) {
        return response.data;
      }

      throw new Error(response.data?.error || "L·ªói khi h·ªßy ƒë∆°n h√†ng");
    } catch (error: any) {
      console.error("‚ùå Error cancelling order:", error);
      throw error;
    }
  }

  /**
   * X√≥a ƒë∆°n h√†ng
   */
  async deleteOrder(orderId: string): Promise<OrderOperationResponse> {
    try {
      const response = await apiClient.delete<OrderOperationResponse>(
        `${this.baseUrl}/${orderId}`
      );

      if (response.data?.successful) {
        return response.data;
      }

      throw new Error(response.data?.error || "L·ªói khi x√≥a ƒë∆°n h√†ng");
    } catch (error: any) {
      console.error("‚ùå Error deleting order:", error);
      throw error;
    }
  }

  // ===== ORDER CREATION & MANAGEMENT =====
  /**
   * T·∫°o ƒë∆°n h√†ng m·ªõi
   */
  async createOrder(orderData: CreateOrderRequest): Promise<CreateOrderResponse> {
    try {
      console.log('‚ûï Creating new order:', orderData);
      
      const response = await apiClient.post<any>(
        this.baseUrl,
        orderData
      );

      console.log('‚úÖ Order created successfully:', response);

      // Ki·ªÉm tra n·∫øu API tr·∫£ v·ªÅ ID ƒë∆°n h√†ng (number ho·∫∑c string)
      if (response && (typeof response === 'number' || typeof response === 'string')) {
        return {
          successful: true,
          data: {
            id: response.toString(),
            code: response.toString(),
            tableId: orderData.tableId,
            createDate: new Date().toISOString(),
          }
        };
      }

      // Ki·ªÉm tra format c≈© v·ªõi field successful
      if (response && response.successful) {
        return response;
      }

      // Ki·ªÉm tra n·∫øu c√≥ data ch·ª©a ID
      if (response && response.data && (typeof response.data === 'number' || typeof response.data === 'string')) {
        return {
          successful: true,
          data: {
            id: response.data.toString(),
            code: response.data.toString(),
            tableId: orderData.tableId,
            createDate: new Date().toISOString(),
          }
        };
      }

      throw new Error(response?.error || "L·ªói khi t·∫°o ƒë∆°n h√†ng");
    } catch (error: any) {
      console.error("‚ùå Error creating order:", error);
      throw error;
    }
  }

  /**
   * C·∫≠p nh·∫≠t th√¥ng tin ƒë∆°n h√†ng
   */
  async updateOrder(orderId: string, orderData: UpdateOrderRequest): Promise<OrderOperationResponse> {
    try {
      console.log('üîÑ Updating order:', orderId, orderData);
      
      const response = await apiClient.put<OrderOperationResponse>(
        `${this.baseUrl}/${orderId}`,
        orderData
      );

      console.log('‚úÖ Order updated successfully:', response);

      if (response && response.successful) {
        return response;
      }

      throw new Error(response?.error || "L·ªói khi c·∫≠p nh·∫≠t ƒë∆°n h√†ng");
    } catch (error: any) {
      console.error("‚ùå Error updating order:", error);
      throw error;
    }
  }

  /**
   * Th√™m/c·∫≠p nh·∫≠t s·∫£n ph·∫©m trong ƒë∆°n h√†ng
   */
  async updateOrderProducts(orderId: string, products: OrderProductRequest[]): Promise<OrderOperationResponse> {
    try {
      console.log('üçΩÔ∏è Updating order products:', orderId, products);
      
      const response = await apiClient.put<OrderOperationResponse>(
        `${this.baseUrl}/${orderId}/products`,
        { products }
      );

      console.log('‚úÖ Order products updated successfully:', response);

      if (response && response.successful) {
        return response;
      }

      throw new Error(response?.error || "L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m ƒë∆°n h√†ng");
    } catch (error: any) {
      console.error("‚ùå Error updating order products:", error);
      throw error;
    }
  }

  /**
   * X√≥a s·∫£n ph·∫©m kh·ªèi ƒë∆°n h√†ng
   */
  async removeOrderProduct(orderId: string, productId: string): Promise<OrderOperationResponse> {
    try {
      console.log('üóëÔ∏è Removing product from order:', orderId, productId);
      
      const response = await apiClient.delete<OrderOperationResponse>(
        `${this.baseUrl}/${orderId}/products/${productId}`
      );

      console.log('‚úÖ Product removed successfully:', response);

      if (response && response.successful) {
        return response;
      }

      throw new Error(response?.error || "L·ªói khi x√≥a s·∫£n ph·∫©m kh·ªèi ƒë∆°n h√†ng");
    } catch (error: any) {
      console.error("‚ùå Error removing product from order:", error);
      throw error;
    }
  }

  // ===== PRINTING FUNCTIONS =====
  /**
   * L·∫•y d·ªØ li·ªáu in t·∫°m t√≠nh
   */
  async getPrintData(orderId: string): Promise<PrintOrderData> {
    try {
      console.log('üñ®Ô∏è Getting print data for order:', orderId);
      
      const response = await apiClient.get<PrintOrderData>(
        `${this.baseUrl}/${orderId}/print`
      );

      console.log('‚úÖ Print data loaded:', response);

      if (response && typeof response === 'object') {
        return response;
      }

      throw new Error("L·ªói khi t·∫£i d·ªØ li·ªáu in t·∫°m t√≠nh");
    } catch (error: any) {
      console.error("‚ùå Error loading print data:", error);
      throw error;
    }
  }

  /**
   * In phi·∫øu ch·∫ø bi·∫øn
   */
  async printKitchen(orderId: string, printGroupId?: string): Promise<KitchenPrintData> {
    try {
      console.log('üç≥ Printing kitchen order:', orderId, printGroupId);
      
      const params = printGroupId ? `?printGroupId=${printGroupId}` : '';
      const response = await apiClient.post<KitchenPrintData>(
        `${this.baseUrl}/${orderId}/print/kitchen${params}`
      );

      console.log('‚úÖ Kitchen print data:', response);

      if (response && typeof response === 'object') {
        return response;
      }

      throw new Error("L·ªói khi in phi·∫øu ch·∫ø bi·∫øn");
    } catch (error: any) {
      console.error("‚ùå Error printing kitchen order:", error);
      throw error;
    }
  }

  /**
   * In h√≥a ƒë∆°n thanh to√°n
   */
  async printReceipt(orderId: string): Promise<PrintOrderData> {
    try {
      console.log('üßæ Printing receipt for order:', orderId);
      
      const response = await apiClient.post<PrintOrderData>(
        `${this.baseUrl}/${orderId}/print/receipt`
      );

      console.log('‚úÖ Receipt print data:', response);

      if (response && typeof response === 'object') {
        return response;
      }

      throw new Error("L·ªói khi in h√≥a ƒë∆°n thanh to√°n");
    } catch (error: any) {
      console.error("‚ùå Error printing receipt:", error);
      throw error;
    }
  }

  // ===== HELPER METHODS =====
  /**
   * L·∫•y tr·∫°ng th√°i ƒë∆°n h√†ng d·ª±a tr√™n logic F&B
   */
  getOrderStatus(order: OrderListItem): string {
    // Logic d·ª±a tr√™n c√°c field date c·ªßa ƒë∆°n h√†ng
    // Backend s·∫Ω tr·∫£ v·ªÅ order v·ªõi c√°c field date t∆∞∆°ng ·ª©ng
    
    if (order.date && order.date.includes("cancel")) {
      return "ƒê√£ h·ªßy";
    }
    
    if (order.date && order.date.includes("receive")) {
      return "ƒê√£ thanh to√°n";
    }
    
    if (order.date && order.date.includes("send")) {
      return "T·∫°m t√≠nh";
    }
    
    if (order.date && order.date.includes("confirm")) {
      return "ƒê√£ x√°c nh·∫≠n";
    }
    
    return "ƒê∆°n h√†ng m·ªõi";
  }

  /**
   * Format gi√° ti·ªÅn theo ƒë·ªãnh d·∫°ng Vi·ªát Nam
   */
  formatPrice(price: number): string {
    return new Intl.NumberFormat("vi-VN").format(price);
  }

  /**
   * Format ng√†y gi·ªù theo ƒë·ªãnh d·∫°ng Vi·ªát Nam
   */
  formatDateTime(dateString: string): {
    date: string;
    time: string;
    fullDateTime: string;
  } {
    const date = new Date(dateString);
    return {
      date: date.toLocaleDateString("vi-VN"),
      time: date.toLocaleTimeString("vi-VN", {
        hour: "2-digit",
        minute: "2-digit",
      }),
      fullDateTime: date.toLocaleString("vi-VN"),
    };
  }
}

export const ordersService = new OrdersService();