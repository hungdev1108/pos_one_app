import {
  OrderDetail,
  OrderListItem,
  Product,
  Table,
  ordersService,
} from "@/src/api";
import { OrderType } from "@/src/api/types";
import { OrderMode } from "@/src/services/buttonVisibilityService";
import { Ionicons } from "@expo/vector-icons";
import React, { useEffect, useRef, useState } from "react";
import {
  ActivityIndicator,
  Alert,
  Animated,
  Dimensions,
  FlatList,
  Modal,
  SafeAreaView,
  StyleSheet,
  Text,
  TouchableOpacity,
  View,
} from "react-native";
import {
  PanGestureHandler,
  PanGestureHandlerGestureEvent,
  PanGestureHandlerStateChangeEvent,
  State,
} from "react-native-gesture-handler";
import { useSafeAreaInsets } from "react-native-safe-area-context";
import {
  calculateOrderSummary,
  formatPrice as formatPriceUtil,
} from "../../utils/orderCalculations";
import CustomerInfoModal from "./CustomerInfoModal";
import KitchenPrintModal from "./KitchenPrintModal";
import OrderActionButtons from "./OrderActionButtons";
import PaymentModal from "./PaymentModal";
import ProductQuantityControls from "./ProductQuantityControls";

interface OrderItem {
  id: string;
  title: string;
  price: number;
  quantity: number;
  product: Product;
}

interface PaymentData {
  totalAmount: number;
  customerPaid: number;
  change: number;
  paymentMethod: "cash" | "bank";
  bankCode?: string;
  voucher?: string;
}

// Interface cho th√¥ng tin ƒë∆°n h√†ng t·∫°m th·ªùi - d√πng cho lu·ªìng thanh to√°n m·ªõi
interface TempOrderData {
  totalAmount: number;
  subtotal: number;
  taxAmount: number;
  orderItems: OrderItem[];
  customerInfo: CustomerInfo;
  selectedTable?: Table | null;
  orderId?: string; // ID ƒë∆°n h√†ng sau khi t·∫°o
}

interface CustomerInfo {
  customerName: string;
  customerPhone: string;
  customerAddress: string;
}

interface UnifiedOrderModalProps {
  visible: boolean;
  orderItems: OrderItem[];
  selectedTable?: Table | null;
  onClose: () => void;
  onUpdateQuantity?: (itemId: string, value: number) => void;
  onRemoveItem?: (itemId: string) => void;
  onCreateOrder?: () => void;
  onPrint?: () => void;
  isExistingOrder?: boolean;
  isPaid?: boolean;
  title?: string;
  selectedOrder?: OrderListItem;
  onRefresh?: () => void;
  onClearOrder?: () => void;
  onOrderCreated?: (orderId: string, shouldOpenPayment?: boolean) => void;
  autoOpenPayment?: boolean;
  // Callback m·ªõi cho lu·ªìng thanh to√°n t·ªëi ∆∞u
  onDirectPayment?: (tempOrderData: TempOrderData) => void;
}

const { width: SCREEN_WIDTH } = Dimensions.get("window");
const SWIPE_THRESHOLD = -SCREEN_WIDTH * 0.3; // 30% of screen width

const { width } = Dimensions.get("window");
const isTablet = width >= 720;

// Swipeable Order Item Component
const SwipeableOrderItem: React.FC<{
  item: OrderItem;
  index: number;
  onUpdateQuantity?: (itemId: string, value: number) => void;
  onRemoveItem?: (itemId: string) => void;
  isPaid: boolean;
  order?: any;
  isExistingOrder?: boolean;
}> = ({
  item,
  index,
  onUpdateQuantity,
  onRemoveItem,
  isPaid,
  order,
  isExistingOrder = false,
}) => {
  const translateX = useRef(new Animated.Value(0)).current;

  const formatPrice = (price: number): string => {
    return new Intl.NumberFormat("vi-VN").format(price);
  };

  const handleSwipeGesture = (event: PanGestureHandlerGestureEvent) => {
    const { translationX, translationY } = event.nativeEvent;

    // Only allow swipe to the left (negative values) and if not paid
    // Also check if this is more of a horizontal swipe than vertical scroll
    const isHorizontalSwipe = Math.abs(translationX) > Math.abs(translationY);

    if (translationX <= 0 && !isPaid && isHorizontalSwipe) {
      translateX.setValue(translationX);
    }
  };

  const handleSwipeStateChange = (event: PanGestureHandlerStateChangeEvent) => {
    const { translationX, translationY, state } = event.nativeEvent;

    if (state === State.END && !isPaid) {
      // Only process if this was primarily a horizontal gesture
      const isHorizontalSwipe = Math.abs(translationX) > Math.abs(translationY);

      if (isHorizontalSwipe && translationX < SWIPE_THRESHOLD) {
        // Animate to show delete button
        Animated.spring(translateX, {
          toValue: -80,
          useNativeDriver: false,
          tension: 100,
          friction: 8,
        }).start();
      } else {
        // Animate back to original position
        Animated.spring(translateX, {
          toValue: 0,
          useNativeDriver: false,
          tension: 100,
          friction: 8,
        }).start();
      }
    }
  };

  const handleDelete = () => {
    if (!isPaid && onRemoveItem) {
      // Animate out then remove
      Animated.timing(translateX, {
        toValue: -SCREEN_WIDTH,
        duration: 300,
        useNativeDriver: false,
      }).start(() => {
        onRemoveItem(item.id);
      });
    }
  };

  const resetSwipe = () => {
    Animated.spring(translateX, {
      toValue: 0,
      useNativeDriver: false,
      tension: 100,
      friction: 8,
    }).start();
  };

  const itemTotal = item.price * item.quantity;

  return (
    <View style={styles.swipeContainer}>
      {/* Delete Button Background - Only show if not paid */}
      {!isPaid && (
        <View style={styles.deleteBackground}>
          <TouchableOpacity style={styles.deleteButton} onPress={handleDelete}>
            <Ionicons name="trash" size={20} color="#fff" />
            <Text style={styles.deleteButtonText}>X√≥a</Text>
          </TouchableOpacity>
        </View>
      )}

      {/* Main Item Content */}
      <Animated.View
        style={[
          styles.orderItem,
          {
            transform: [{ translateX }],
          },
        ]}
      >
        <View style={styles.itemContent}>
          {/* Item Number */}
          <View style={styles.itemNumberContainer}>
            <Text style={styles.itemNumber}>{index + 1}</Text>
          </View>

          {/* Swipeable area - ch·ªâ cho ph·∫ßn text */}
          <PanGestureHandler
            onGestureEvent={handleSwipeGesture}
            onHandlerStateChange={handleSwipeStateChange}
            enabled={!isPaid}
            activeOffsetX={[-15, 15]}
            failOffsetY={[-30, 30]}
            shouldCancelWhenOutside={true}
          >
            <View style={styles.itemInfo}>
              <TouchableOpacity onPress={resetSwipe} activeOpacity={0.7}>
                <Text style={styles.itemTitle} numberOfLines={2}>
                  {item.title.trim()}
                </Text>
                <Text style={styles.itemPrice}>{formatPrice(item.price)}</Text>
              </TouchableOpacity>
            </View>
          </PanGestureHandler>

          {/* Controls area - no gesture */}
          <ProductQuantityControls
            item={item}
            order={order}
            onUpdateQuantity={onUpdateQuantity}
            onRemoveItem={onRemoveItem}
            isPaid={isPaid}
            mode={isExistingOrder ? "change" : "absolute"}
          />

          <View style={styles.itemTotalContainer}>
            <Text style={styles.itemTotal}>{formatPrice(itemTotal)}</Text>
          </View>
        </View>
      </Animated.View>
    </View>
  );
};

export default function UnifiedOrderModal({
  visible,
  orderItems,
  selectedTable,
  onClose,
  onUpdateQuantity,
  onRemoveItem,
  onCreateOrder,
  onPrint,
  isExistingOrder = false,
  isPaid = false,
  title,
  selectedOrder,
  onRefresh,
  onClearOrder,
  onOrderCreated,
  autoOpenPayment = false,
  onDirectPayment,
}: UnifiedOrderModalProps) {
  const insets = useSafeAreaInsets();
  const [loading, setLoading] = useState(false);
  const [orderDetail, setOrderDetail] = useState<OrderDetail | null>(null);
  const [orderStatus, setOrderStatus] = useState<string>("");
  const [orderStatusText, setOrderStatusText] = useState<string>("");
  const [orderDetailItems, setOrderDetailItems] = useState<OrderItem[]>([]);
  const [paymentModalVisible, setPaymentModalVisible] = useState(false);
  const [orderTypes, setOrderTypes] = useState<OrderType[]>([]);

  // Kitchen print modal state
  const [kitchenPrintModalVisible, setKitchenPrintModalVisible] =
    useState(false);
  const [kitchenPrintData, setKitchenPrintData] = useState<any>(null);

  // Customer info modal state
  const [customerInfoModalVisible, setCustomerInfoModalVisible] =
    useState(false);
  const [shouldResetCustomerInfo, setShouldResetCustomerInfo] = useState(false);
  const [customerInfo, setCustomerInfo] = useState<CustomerInfo>({
    customerName: "",
    customerPhone: "",
    customerAddress: "",
  });
  const [shouldAutoOpenPayment, setShouldAutoOpenPayment] = useState(false);

  useEffect(() => {
    if (visible && selectedOrder) {
      loadOrderDetail();
    } else {
      // Reset state khi modal ƒë√≥ng ho·∫∑c kh√¥ng c√≥ selectedOrder
      setOrderDetail(null);
      setOrderDetailItems([]);
      setOrderStatus("");
      setOrderStatusText("");
      loadOrderTypes();
    }
  }, [visible, selectedOrder]);

  // Auto open payment modal khi c√≥ flag
  useEffect(() => {
    if ((shouldAutoOpenPayment || autoOpenPayment) && orderDetail && !loading) {
      setShouldAutoOpenPayment(false);
      // Delay nh·ªè ƒë·ªÉ UI ·ªïn ƒë·ªãnh
      setTimeout(() => {
        setPaymentModalVisible(true);
      }, 300);
    }
  }, [shouldAutoOpenPayment, autoOpenPayment, orderDetail, loading]);

  // Reset shouldResetCustomerInfo flag sau khi ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng
  useEffect(() => {
    if (shouldResetCustomerInfo) {
      // Delay m·ªôt ch√∫t ƒë·ªÉ CustomerInfoModal c√≥ th·ªùi gian x·ª≠ l√Ω reset
      const timer = setTimeout(() => {
        setShouldResetCustomerInfo(false);
      }, 100);
      return () => clearTimeout(timer);
    }
  }, [shouldResetCustomerInfo]);

  const loadOrderTypes = async () => {
    const orderTypes = await ordersService.getOrderTypes();
    console.log("üîç oooooooorderTypes:", orderTypes);
    setOrderTypes(orderTypes);
  };

  const loadOrderDetail = async () => {
    if (!selectedOrder) {
      console.log("‚ö†Ô∏è No selected order to load details");
      return;
    }

    try {
      setLoading(true);
      console.log("üîÑ Loading order detail for:", selectedOrder.id);

      const detail = await ordersService.getOrderDetail(selectedOrder.id);
      console.log("‚úÖ Order detail loaded:", detail);
      console.log(
        "üìä Products in reloaded order:",
        detail.products?.map((p) => ({
          id: p.id,
          name: p.name || p.productName,
          quantity: p.quantity,
        }))
      );

      setOrderDetail(detail);

      // B·ªï sung c√°c tr∆∞·ªùng thi·∫øu n·∫øu c·∫ßn
      if (detail) {
        // C√°c tr∆∞·ªùng c·∫•p cao nh·∫•t
        if (detail.LoaiThue === undefined) detail.LoaiThue = "1"; // M·∫∑c ƒë·ªãnh l√† NVAT
        if (detail.PriceIncludeVAT === undefined)
          detail.PriceIncludeVAT = false; // M·∫∑c ƒë·ªãnh gi√° ch∆∞a bao g·ªìm VAT
        if (detail.DiscountVAT === undefined) detail.DiscountVAT = 0;
        if (detail.DiscountType === undefined) detail.DiscountType = 0;
        if (detail.Discount === undefined) detail.Discount = 0;

        // C√°c tr∆∞·ªùng c·ªßa s·∫£n ph·∫©m
        if (detail.products && detail.products.length > 0) {
          detail.products.forEach((product) => {
            // KH√îNG force set VAT, ch·ªâ t√≠nh to√°n c√°c field thi·∫øu
            // L·∫•y VAT rate t·ª´ API (∆∞u ti√™n field 'vat' vi·∫øt th∆∞·ªùng)
            const vatRate = product.vat || product.VAT || 0;

            // T√≠nh gi√° bao g·ªìm VAT n·∫øu kh√¥ng c√≥
            if (product.priceIncludeVAT === undefined) {
              product.priceIncludeVAT = product.price * (1 + vatRate / 100);
            }
            // T√≠nh t·ªïng ti·ªÅn bao g·ªìm VAT n·∫øu kh√¥ng c√≥
            if (product.totalCostInclideVAT === undefined) {
              product.totalCostInclideVAT =
                product.priceIncludeVAT * product.quantity;
            }
          });
        }

        // Convert OrderDetail.products th√†nh OrderItem[] ƒë·ªÉ hi·ªÉn th·ªã
        if (detail.products && detail.products.length > 0) {
          const convertedItems: OrderItem[] = detail.products.map((product) => {
            // L·∫•y t√™n s·∫£n ph·∫©m t·ª´ field 'name' ho·∫∑c fallback v·ªÅ 'productName' v√† trim kho·∫£ng tr·∫Øng
            const productTitle = (
              product.name ||
              product.productName ||
              "S·∫£n ph·∫©m"
            ).trim();

            return {
              id: product.id,
              title: productTitle,
              price: product.price,
              quantity: product.quantity,
              product: {
                id: product.id,
                title: productTitle,
                categoryId: "",
                categoryName: "",
                price: product.price,
                priceAfterDiscount: product.priceIncludeVAT || product.price,
                discount: 0,
                discountType: 0,
                unitName: product.unitName || "",
                isActive: true,
                isPublished: true,
                categoryOutputMethod: 0,
              } as Product,
            };
          });
          setOrderDetailItems(convertedItems);
        } else {
          setOrderDetailItems([]);
        }

        // X√°c ƒë·ªãnh tr·∫°ng th√°i ƒë∆°n h√†ng
        let statusText = "";
        if (detail.receiveDate) {
          setOrderStatus("paid");
          statusText = "ƒê√£ thanh to√°n";
        } else if (detail.sendDate) {
          setOrderStatus("sent");
          statusText = "T·∫°m t√≠nh";
        } else if (detail.confirmDate) {
          setOrderStatus("confirmed");
          statusText = "ƒê√£ x√°c nh·∫≠n";
        } else if (detail.cancelDate) {
          setOrderStatus("cancelled");
          statusText = "ƒê√£ h·ªßy";
        } else {
          setOrderStatus("new");
          statusText = "ƒê∆°n m·ªõi";
        }
        setOrderStatusText(statusText);
      }
    } catch (error: any) {
      Alert.alert("L·ªói", `Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt ƒë∆°n h√†ng: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  // const formatPrice = (price: number): string => {
  //   return new Intl.NumberFormat("vi-VN").format(price);
  // };

  const formatDateTime = (dateString?: string) => {
    if (!dateString) return { date: "", time: "" };

    const date = new Date(dateString);
    return {
      date: date.toLocaleDateString("vi-VN"),
      time: date.toLocaleTimeString("vi-VN", {
        hour: "2-digit",
        minute: "2-digit",
      }),
    };
  };

  // Determine which items to use for display and calculations
  const displayItems = selectedOrder ? orderDetailItems : orderItems;

  // Calculate totals - use orderCalculations for accurate calculation
  let subtotal = 0;
  let taxAmount = 0;
  let totalAmount = 0;

  if (selectedOrder && orderDetail && orderDetail.products) {
    // Debug: Log orderDetail structure
    console.log("üîç OrderDetail:", {
      LoaiThue: orderDetail.LoaiThue,
      PriceIncludeVAT: orderDetail.PriceIncludeVAT,
      Discount: orderDetail.Discount,
      DiscountType: orderDetail.DiscountType,
      DiscountVAT: orderDetail.DiscountVAT,
      productsCount: orderDetail.products.length,
    });

    // Debug: Log t·∫•t c·∫£ s·∫£n ph·∫©m v√† VAT c·ªßa ch√∫ng
    console.log("üì¶ All Products VAT Info:");
    orderDetail.products.forEach((product, index) => {
      const actualVAT = product.vat || product.VAT || 0;
      const productName = product.name || product.productName;
      console.log(`  Product ${index}: ${productName}`);
      console.log(
        `    price=${product.price}, priceIncludeVAT=${product.priceIncludeVAT}`
      );
      console.log(
        `    VAT field=${product.VAT}, vat field=${product.vat}, actual VAT=${actualVAT}%`
      );
      console.log(
        `    totalCost=${product.totalCost}, totalCostInclideVAT=${product.totalCostInclideVAT}`
      );

      // T√≠nh VAT amount ƒë·ªÉ verify
      const vatAmount = product.totalCostInclideVAT - product.totalCost;
      console.log(
        `    VAT Amount: ${vatAmount} (should be ${
          (product.totalCost * actualVAT) / 100
        })`
      );
    });

    // Force s·ª≠ d·ª•ng calculateOrderSummary ƒë·ªÉ test fix VAT
    const orderSummary = calculateOrderSummary(
      orderDetail,
      orderDetail.products
    );
    subtotal = orderSummary.tienHang;
    taxAmount = orderSummary.tienThue;
    totalAmount = orderSummary.phaiThu;

    console.log("üìä Using Calculated Summary (Fixed VAT):", {
      tienHang: subtotal,
      tienThue: taxAmount,
      phaiThu: totalAmount,
    });
  } else {
    // Calculate from displayItems for new orders (simplified)
    subtotal = displayItems.reduce(
      (sum, item) => sum + item.price * item.quantity,
      0
    );
    const taxRate = 0.1; // 10% VAT
    taxAmount = subtotal * taxRate;
    totalAmount = subtotal + taxAmount;
  }

  const renderOrderItem = ({
    item,
    index,
  }: {
    item: OrderItem;
    index: number;
  }) => {
    // Determine if order is paid based on status
    const isOrderPaid = selectedOrder ? orderStatus === "paid" : isPaid;

    // X√°c ƒë·ªãnh handlers ph√π h·ª£p d·ª±a v√†o lo·∫°i ƒë∆°n h√†ng
    const updateQuantityHandler = selectedOrder
      ? handleUpdateQuantityExistingOrder
      : onUpdateQuantity;

    const removeItemHandler = selectedOrder
      ? handleRemoveItemExistingOrder
      : onRemoveItem;

    console.log("üîç renderOrderItem - Handler selection:", {
      hasSelectedOrder: !!selectedOrder,
      updateQuantityHandler: selectedOrder
        ? "handleUpdateQuantityExistingOrder"
        : "onUpdateQuantity",
      removeItemHandler: selectedOrder
        ? "handleRemoveItemExistingOrder"
        : "onRemoveItem",
    });

    return (
      <SwipeableOrderItem
        item={item}
        index={index}
        onUpdateQuantity={updateQuantityHandler}
        onRemoveItem={removeItemHandler}
        isPaid={isOrderPaid}
        order={orderDetail || selectedOrder}
        isExistingOrder={!!selectedOrder}
      />
    );
  };

  // Render th√¥ng tin chi ti·∫øt ƒë∆°n h√†ng
  const renderOrderDetails = () => {
    if (!selectedOrder || !orderDetail) return null;

    // Debug logging ƒë·ªÉ ki·ªÉm tra c√°c tr∆∞·ªùng c√≥ th·ªÉ ch·ª©a th√¥ng tin lo·∫°i ƒë∆°n
    console.log("üîç orderDetail full structure:", {
      orderType: (orderDetail as any).orderType,
      isDelivery: (orderDetail as any).isDelivery,
      paymentMethod: (orderDetail as any).paymentMethod,
      tableName: orderDetail.tableName,
      tableId: orderDetail.tableId,
    });
    console.log("üîç orderTypes:", orderTypes);

    // X√°c ƒë·ªãnh lo·∫°i ƒë∆°n d·ª±a tr√™n logic nghi·ªáp v·ª•
    const getOrderTypeText = () => {
      // N·∫øu c√≥ orderType field v√† match v·ªõi orderTypes
      const orderType = (orderDetail as any).orderType;
      if (orderType && orderTypes.length > 0) {
        const matchedType = orderTypes.find(
          (type) =>
            type.sourceId === orderType?.toString() ||
            type.id === orderType?.toString()
        );
        if (matchedType) {
          return matchedType.titles[0]?.title || "Kh√¥ng x√°c ƒë·ªãnh";
        }
      }

      // Logic fallback d·ª±a tr√™n c√°c tr∆∞·ªùng kh√°c
      const isDelivery = (orderDetail as any).isDelivery;
      if (isDelivery) {
        return "Giao h√†ng";
      } else if (orderDetail.tableName) {
        return "T·∫°i ch·ªó";
      } else {
        return "Mang v·ªÅ";
      }
    };

    return (
      <View style={styles.orderInfoContainer}>
        {/* Info table */}
        {/* {orderDetail.tableName && (
          <View style={styles.orderInfoRowTable}>
            <Text style={styles.orderInfoLabel}>B√†n:</Text>
            <Text style={styles.orderInfoValue}>{orderDetail.tableName} - Khu {orderDetail.tableAreaName}</Text>
          </View>
        )} */}

        {/* Info order type */}
        <View style={styles.orderInfoRow}>
          <Text style={styles.orderInfoLabel}>Lo·∫°i ƒë∆°n:</Text>
          <Text style={styles.orderInfoValue}>{getOrderTypeText()}</Text>
        </View>

        <View style={styles.orderInfoRow}>
          <Text style={styles.orderInfoLabel}>M√£ ƒë∆°n:</Text>
          <Text style={styles.orderInfoValue}>{orderDetail.code}</Text>
        </View>

        <View style={styles.orderInfoRow}>
          <Text style={styles.orderInfoLabel}>Tr·∫°ng th√°i:</Text>
          <View style={[styles.statusBadge, getStatusBadgeStyle()]}>
            <Text style={styles.statusText}>{orderStatusText}</Text>
          </View>
        </View>

        <View style={styles.orderInfoRow}>
          <Text style={styles.orderInfoLabel}>Kh√°ch h√†ng:</Text>
          <Text style={styles.orderInfoValue}>
            {orderDetail.customerName || "Kh√°ch l·∫ª"}{" "}
            {orderDetail.customerPhone ? `(${orderDetail.customerPhone})` : ""}
          </Text>
        </View>

        <View style={styles.orderInfoRow}>
          <Text style={styles.orderInfoLabel}>Ng√†y t·∫°o:</Text>
          <Text style={styles.orderInfoValue}>
            {formatDateTime(orderDetail.createDate).time}{" "}
            {formatDateTime(orderDetail.createDate).date}
          </Text>
        </View>
      </View>
    );
  };

  // L·∫•y m√†u n·ªÅn cho badge tr·∫°ng th√°i
  const getStatusBadgeStyle = () => {
    switch (orderStatus) {
      case "new":
        return styles.statusBadgeNew;
      case "confirmed":
        return styles.statusBadgeConfirmed;
      case "sent":
        return styles.statusBadgeSent;
      case "paid":
        return styles.statusBadgePaid;
      case "cancelled":
        return styles.statusBadgeCanceled;
      default:
        return {};
    }
  };

  const handleCustomerInfoSave = (newCustomerInfo: CustomerInfo) => {
    setCustomerInfo(newCustomerInfo);
  };

  // X·ª≠ l√Ω tƒÉng gi·∫£m s·ªë l∆∞·ª£ng cho ƒë∆°n h√†ng hi·ªán c√≥
  const handleUpdateQuantityExistingOrder = async (
    itemId: string,
    value: number
  ) => {
    console.log("üéØ handleUpdateQuantityExistingOrder called with:", {
      itemId,
      value,
      orderId: selectedOrder?.id,
      orderCode: selectedOrder?.code,
      tableId: selectedTable?.id,
      tableName: selectedTable?.name,
      tableStatus: selectedTable?.status,
    });

    if (!selectedOrder || !orderDetail) {
      console.log("‚ö†Ô∏è No selected order or order detail for quantity update");
      return;
    }

    try {
      setLoading(true);

      // Ki·ªÉm tra ƒëi·ªÅu ki·ªán c√≥ th·ªÉ c·∫≠p nh·∫≠t kh√¥ng
      const canAddResult = ordersService.canAddProductToOrder(orderDetail);
      if (!canAddResult.canAdd) {
        Alert.alert(
          "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t",
          canAddResult.reason || "ƒê∆°n h√†ng kh√¥ng h·ª£p l·ªá"
        );
        return;
      }

      // Ki·ªÉm tra ƒëi·ªÅu ki·ªán c·ª• th·ªÉ
      if (orderDetail.receiveDate) {
        Alert.alert(
          "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t",
          "ƒê∆°n h√†ng ƒë√£ thanh to√°n, kh√¥ng th·ªÉ thay ƒë·ªïi s·ªë l∆∞·ª£ng"
        );
        return;
      }

      if (orderDetail.sendDate && orderDetail.tuDongXuatKhoBanHang === 1) {
        Alert.alert(
          "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t",
          "ƒê∆°n h√†ng ƒë√£ t·∫°m t√≠nh v√† t·ª± ƒë·ªông xu·∫•t kho, kh√¥ng th·ªÉ thay ƒë·ªïi"
        );
        return;
      }

      console.log(
        `üìà Updating quantity for item ${itemId} with value: ${value} (treated as changeAmount for existing orders)`
      );

      // V·ªõi ƒë∆°n h√†ng c√≥ s·∫µn, value s·∫Ω l√† changeAmount (-1, +1)
      const changeAmount = value;
      await ordersService.updateProductQuantityInOrder(
        selectedOrder.id,
        itemId,
        changeAmount
      );
      console.log("‚úÖ Product quantity updated");

      // Reload order detail ƒë·ªÉ c·∫≠p nh·∫≠t UI
      await loadOrderDetail();

      // Trigger refresh ·ªü HomeScreen ƒë·ªÉ c·∫≠p nh·∫≠t d·ªØ li·ªáu
      onRefresh?.();
    } catch (error: any) {
      console.error("‚ùå Error updating quantity:", error);
      Alert.alert(
        "L·ªói",
        error.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m"
      );
    } finally {
      setLoading(false);
    }
  };

  const handleRemoveItemExistingOrder = async (itemId: string) => {
    if (!selectedOrder) {
      console.log("‚ö†Ô∏è No selected order for item removal");
      return;
    }

    try {
      setLoading(true);

      // Ki·ªÉm tra ƒëi·ªÅu ki·ªán c√≥ th·ªÉ x√≥a kh√¥ng
      if (orderDetail?.receiveDate) {
        Alert.alert(
          "Kh√¥ng th·ªÉ x√≥a",
          "ƒê∆°n h√†ng ƒë√£ thanh to√°n, kh√¥ng th·ªÉ x√≥a m√≥n"
        );
        return;
      }

      if (orderDetail?.sendDate && orderDetail?.tuDongXuatKhoBanHang === 1) {
        Alert.alert(
          "Kh√¥ng th·ªÉ x√≥a",
          "ƒê∆°n h√†ng ƒë√£ t·∫°m t√≠nh v√† t·ª± ƒë·ªông xu·∫•t kho, kh√¥ng th·ªÉ x√≥a m√≥n"
        );
        return;
      }

      console.log(`üóëÔ∏è Removing item ${itemId} from order`);
      await ordersService.removeOrderProduct(selectedOrder.id, itemId);

      // Reload order detail ƒë·ªÉ c·∫≠p nh·∫≠t UI
      await loadOrderDetail();

      // Trigger refresh ·ªü HomeScreen ƒë·ªÉ c·∫≠p nh·∫≠t d·ªØ li·ªáu
      onRefresh?.();
    } catch (error: any) {
      console.error("‚ùå Error removing item:", error);
      Alert.alert(
        "L·ªói",
        error.message || "Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m kh·ªèi ƒë∆°n h√†ng"
      );
    } finally {
      setLoading(false);
    }
  };

  const handleCreateOrder = async () => {
    if (loading) {
      console.log(
        "‚ö†Ô∏è Order creation already in progress, ignoring duplicate call"
      );
      return;
    }

    if (orderItems.length === 0) {
      Alert.alert("L·ªói", "Ch∆∞a c√≥ m√≥n n√†o ƒë∆∞·ª£c ch·ªçn");
      return;
    }

    try {
      setLoading(true);

      // Chu·∫©n b·ªã d·ªØ li·ªáu s·∫£n ph·∫©m
      const products = orderItems.map((item) => ({
        productId: item.product.id,
        quantity: item.quantity,
        price: item.product.price,
        priceIncludeVAT: item.product.priceAfterDiscount || item.product.price,
        note: "",
        vat: 10,
        name: item.product.title.trim(),
        productCode: item.product.code,
        unitName: item.product.unitName || "C√°i",
      }));

      // S·ª≠ d·ª•ng th√¥ng tin kh√°ch h√†ng ƒë√£ l∆∞u ho·∫∑c gi√° tr·ªã m·∫∑c ƒë·ªãnh
      const finalCustomerName =
        customerInfo.customerName || "Ng∆∞·ªùi mua kh√¥ng cung c·∫•p th√¥ng tin";
      const finalCustomerPhone = customerInfo.customerPhone || "0000000000";

      // T·∫°o request
      const orderData: any = {
        customerName: finalCustomerName,
        customerPhone: finalCustomerPhone,
        products,
        note: "",
        paymentMethod: 0,
        priceIncludeVAT: true,
        discountType: 0,
        discount: 0,
        discountVAT: 0,
        orderCustomerName: finalCustomerName,
        orderCustomerPhone: finalCustomerPhone,
        isDelivery: false,
        debt: {
          debit: 0,
          debitExpire: new Date().toISOString(),
        },
        delivery: {
          deliveryId: 0,
          deliveryName: "",
          deliveryCode: "",
          deliveryFee: 0,
          cod: false,
        },
        flashSales: [],
      };

      // Ch·ªâ th√™m tableId n·∫øu c√≥ b√†n ƒë∆∞·ª£c ch·ªçn
      if (selectedTable?.id) {
        orderData.tableId = selectedTable.id;
      }

      console.log("üçΩÔ∏è Creating order with data:", orderData);

      const response = await ordersService.createOrder(orderData);

      console.log("üìã Create order response:", response);

      if (response.successful && response.data) {
        Alert.alert(
          "Th√†nh c√¥ng",
          `ƒê√£ t·∫°o ƒë∆°n h√†ng ${response.data.code}${
            selectedTable ? ` cho ${selectedTable.name}` : ""
          }`,
          [
            {
              text: "OK",
              onPress: () => {
                // Reset customer info ƒë·ªÉ l·∫ßn t·∫°o ti·∫øp theo kh√¥ng c√≤n d·ªØ li·ªáu c≈©
                setShouldResetCustomerInfo(true);
                setCustomerInfo({
                  customerName: "",
                  customerPhone: "",
                  customerAddress: "",
                });

                onClearOrder?.(); // X√≥a gi·ªè h√†ng t·∫°m
                onClose();
                // Th√¥ng b√°o cho home.tsx ƒë·ªÉ chuy·ªÉn tab v√† refresh
                onOrderCreated?.(response.data!.id);
              },
            },
          ]
        );
      } else {
        throw new Error(response.error || "Kh√¥ng th·ªÉ t·∫°o ƒë∆°n h√†ng");
      }
    } catch (error: any) {
      console.error("‚ùå Error creating order:", error);
      Alert.alert(
        "L·ªói",
        error.message || "C√≥ l·ªói x·∫£y ra khi t·∫°o ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i."
      );
    } finally {
      setLoading(false);
    }
  };

  /**
   * LU·ªíNG M·ªöI T·ªêI ∆ØU: Thanh to√°n tr·ª±c ti·∫øp v·ªõi th√¥ng tin t·∫°m
   * 1. L∆∞u th√¥ng tin ƒë∆°n h√†ng v√†o bi·∫øn t·ªïng
   * 2. T·∫°o ƒë∆°n h√†ng v√† in ch·∫ø bi·∫øn async
   * 3. Chuy·ªÉn th·∫≥ng sang m√†n h√¨nh thanh to√°n v·ªõi th√¥ng tin t·ª´ bi·∫øn t·ªïng
   */
  const handleOptimizedPaymentFlow = async () => {
    if (loading) {
      console.log(
        "‚ö†Ô∏è Optimized payment flow already in progress, ignoring duplicate call"
      );
      return;
    }

    if (orderItems.length === 0) {
      Alert.alert("L·ªói", "Ch∆∞a c√≥ m√≥n n√†o ƒë∆∞·ª£c ch·ªçn");
      return;
    }

    try {
      setLoading(true);

      // B∆Ø·ªöC 1: T·∫°o bi·∫øn t·ªïng l∆∞u th√¥ng tin ƒë∆°n h√†ng t·∫°m th·ªùi
      const tempOrderData: TempOrderData = {
        totalAmount,
        subtotal,
        taxAmount,
        orderItems: [...orderItems], // Clone ƒë·ªÉ tr√°nh reference issues
        customerInfo: { ...customerInfo },
        selectedTable: selectedTable,
      };

      console.log("üíæ L∆∞u th√¥ng tin t·∫°m v√†o bi·∫øn t·ªïng:", tempOrderData);

      // B∆Ø·ªöC 2: T·∫°o ƒë∆°n h√†ng async (kh√¥ng ch·ªù)
      const createOrderAsync = async () => {
        try {
          const products = orderItems.map((item) => ({
            productId: item.product.id,
            quantity: item.quantity,
            price: item.product.price,
            priceIncludeVAT:
              item.product.priceAfterDiscount || item.product.price,
            note: "",
            vat: 10,
            name: item.product.title.trim(),
            productCode: item.product.code,
            unitName: item.product.unitName || "C√°i",
          }));

          const finalCustomerName =
            customerInfo.customerName || "Ng∆∞·ªùi mua kh√¥ng cung c·∫•p th√¥ng tin";
          const finalCustomerPhone = customerInfo.customerPhone || "0000000000";

          const orderData: any = {
            customerName: finalCustomerName,
            customerPhone: finalCustomerPhone,
            products,
            note: "",
            paymentMethod: 0,
            priceIncludeVAT: true,
            discountType: 0,
            discount: 0,
            discountVAT: 0,
            orderCustomerName: finalCustomerName,
            orderCustomerPhone: finalCustomerPhone,
            isDelivery: false,
            debt: {
              debit: 0,
              debitExpire: new Date().toISOString(),
            },
            delivery: {
              deliveryId: 0,
              deliveryName: "",
              deliveryCode: "",
              deliveryFee: 0,
              cod: false,
            },
            flashSales: [],
          };

          if (selectedTable?.id) {
            orderData.tableId = selectedTable.id;
          }

          console.log("üçΩÔ∏è Creating order asynchronously:", orderData);
          const response = await ordersService.createOrder(orderData);

          if (response.successful && response.data) {
            const orderId = response.data.id;

            // B∆Ø·ªöC 2.1: In ch·∫ø bi·∫øn async
            try {
              console.log("üç≥ Kitchen print API call for order:", orderId);
              // await ordersService.printKitchen(orderId);
              console.log("‚úÖ ƒê√£ in ch·∫ø bi·∫øn");
            } catch (kitchenError: any) {
              console.error("‚ùå Kitchen print error:", kitchenError);
              console.log("‚ö†Ô∏è ƒê√£ in ch·∫ø bi·∫øn (simulated)");
            }

            // C·∫≠p nh·∫≠t orderId v√†o temp data n·∫øu callback parent c·∫ßn
            tempOrderData.orderId = orderId;

            console.log("‚úÖ Order created successfully with ID:", orderId);
            return orderId;
          } else {
            throw new Error(response.error || "Kh√¥ng th·ªÉ t·∫°o ƒë∆°n h√†ng");
          }
        } catch (error: any) {
          console.error("‚ùå Error creating order asynchronously:", error);
          // C√≥ th·ªÉ th√¥ng b√°o l·ªói cho user sau n√†y n·∫øu c·∫ßn
          return null;
        }
      };

      // B∆Ø·ªöC 3: Clear form v√† reset tr·∫°ng th√°i
      setShouldResetCustomerInfo(true);
      setCustomerInfo({
        customerName: "",
        customerPhone: "",
        customerAddress: "",
      });
      onClearOrder?.();

      // B∆Ø·ªöC 4: Chuy·ªÉn th·∫≥ng sang m√†n h√¨nh thanh to√°n v·ªõi th√¥ng tin t·∫°m
      onClose();

      if (onDirectPayment) {
        console.log(
          "üöÄ Chuy·ªÉn th·∫≥ng sang m√†n h√¨nh thanh to√°n v·ªõi th√¥ng tin t·∫°m"
        );
        onDirectPayment(tempOrderData);
      } else {
        // Fallback v·ªÅ lu·ªìng c≈© n·∫øu parent ch∆∞a support
        console.log("‚ö†Ô∏è Parent ch∆∞a support lu·ªìng m·ªõi, fallback v·ªÅ lu·ªìng c≈©");
        // Th·ª±c thi t·∫°o ƒë∆°n h√†ng ƒë·ªìng b·ªô
        const orderId = await createOrderAsync();
        if (orderId) {
          onOrderCreated?.(orderId, true);
        }
      }

      // Th·ª±c thi t·∫°o ƒë∆°n h√†ng async trong background (kh√¥ng block UI)
      createOrderAsync();

      console.log("‚úÖ Optimized payment flow completed");
    } catch (error: any) {
      console.error("‚ùå Error in optimized payment flow:", error);
      Alert.alert(
        "L·ªói",
        error.message || "C√≥ l·ªói x·∫£y ra khi t·∫°o ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i."
      );
    } finally {
      setLoading(false);
    }
  };

  const handlePayment = async (paymentData: PaymentData) => {
    try {
      if (selectedOrder && orderDetail) {
        // Log payment data for debugging
        console.log("üí∞ Payment data:", paymentData);

        await ordersService.receiveOrder(orderDetail.id);
        Alert.alert(
          "Th√†nh c√¥ng",
          `ƒê√£ thanh to√°n ƒë∆°n h√†ng\nTi·ªÅn kh√°ch tr·∫£: ${paymentData.customerPaid.toLocaleString(
            "vi-VN"
          )}\nTi·ªÅn th·ªëi l·∫°i: ${Math.abs(paymentData.change).toLocaleString(
            "vi-VN"
          )}`
        );
        setPaymentModalVisible(false);
        onClose();
        onRefresh?.();
      }
    } catch (error: any) {
      Alert.alert("L·ªói", `Kh√¥ng th·ªÉ thanh to√°n ƒë∆°n h√†ng: ${error.message}`);
    }
  };

  // H√†m x·ª≠ l√Ω lu·ªìng in ch·∫ø bi·∫øn: t·∫°o ƒë∆°n h√†ng ‚Üí hi·ªÉn th·ªã bill in ch·∫ø bi·∫øn
  const handleKitchenPrintFlow = async () => {
    if (loading) {
      console.log(
        "‚ö†Ô∏è Order creation already in progress, ignoring duplicate call"
      );
      return;
    }

    if (orderItems.length === 0) {
      Alert.alert("L·ªói", "Ch∆∞a c√≥ m√≥n n√†o ƒë∆∞·ª£c ch·ªçn");
      return;
    }

    try {
      setLoading(true);

      // Chu·∫©n b·ªã d·ªØ li·ªáu s·∫£n ph·∫©m
      const products = orderItems.map((item) => ({
        productId: item.product.id,
        quantity: item.quantity,
        price: item.product.price,
        priceIncludeVAT: item.product.priceAfterDiscount || item.product.price,
        note: "",
        vat: 10,
        name: item.product.title.trim(),
        productCode: item.product.code,
        unitName: item.product.unitName || "C√°i",
      }));

      // S·ª≠ d·ª•ng th√¥ng tin kh√°ch h√†ng ƒë√£ l∆∞u ho·∫∑c gi√° tr·ªã m·∫∑c ƒë·ªãnh
      const finalCustomerName =
        customerInfo.customerName || "Ng∆∞·ªùi mua kh√¥ng cung c·∫•p th√¥ng tin";
      const finalCustomerPhone = customerInfo.customerPhone || "0000000000";

      // T·∫°o request
      const orderData: any = {
        customerName: finalCustomerName,
        customerPhone: finalCustomerPhone,
        products,
        note: "",
        paymentMethod: 0,
        priceIncludeVAT: true,
        discountType: 0,
        discount: 0,
        discountVAT: 0,
        orderCustomerName: finalCustomerName,
        orderCustomerPhone: finalCustomerPhone,
        isDelivery: false,
        debt: {
          debit: 0,
          debitExpire: new Date().toISOString(),
        },
        delivery: {
          deliveryId: 0,
          deliveryName: "",
          deliveryCode: "",
          deliveryFee: 0,
          cod: false,
        },
        flashSales: [],
      };

      // Ch·ªâ th√™m tableId n·∫øu c√≥ b√†n ƒë∆∞·ª£c ch·ªçn
      if (selectedTable?.id) {
        orderData.tableId = selectedTable.id;
      }

      console.log("üçΩÔ∏è Creating order for kitchen print:", orderData);
      const response = await ordersService.createOrder(orderData);

      if (response.successful && response.data) {
        const orderId = response.data.id;
        const orderCode = response.data.code;

        console.log("‚úÖ Order created for kitchen print:", orderCode);

        // Chu·∫©n b·ªã d·ªØ li·ªáu cho KitchenPrintModal
        const printData = {
          orderCode: orderCode,
          tableName: selectedTable?.name || "B√ÄN S·ªê - B√†n S·ªë 8",
          employeeName: "Nh√¢n vi√™n",
          items: orderItems.map((item) => ({
            id: item.id,
            name: item.title.trim(),
            quantity: item.quantity,
            note: "",
          })),
          createTime: new Date().toISOString(),
        };

        // Reset customer info v√† clear order
        setShouldResetCustomerInfo(true);
        setCustomerInfo({
          customerName: "",
          customerPhone: "",
          customerAddress: "",
        });
        onClearOrder?.();

        // Hi·ªÉn th·ªã KitchenPrintModal
        setKitchenPrintData(printData);
        setKitchenPrintModalVisible(true);

        console.log("üñ®Ô∏è Kitchen print modal opened for order:", orderCode);
      } else {
        throw new Error(response.error || "Kh√¥ng th·ªÉ t·∫°o ƒë∆°n h√†ng");
      }
    } catch (error: any) {
      console.error("‚ùå Error in kitchen print flow:", error);
      Alert.alert(
        "L·ªói",
        error.message || "C√≥ l·ªói x·∫£y ra khi t·∫°o ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i."
      );
    } finally {
      setLoading(false);
    }
  };

  const handleOrderAction = async (action: string) => {
    if (selectedOrder && orderDetail) {
      try {
        switch (action) {
          case "cancel":
          case "cancel_order":
            Alert.alert("H·ªßy ƒë∆°n h√†ng", "B·∫°n c√≥ ch·∫Øc mu·ªën h·ªßy ƒë∆°n h√†ng n√†y?", [
              { text: "Kh√¥ng", style: "cancel" },
              {
                text: "C√≥",
                onPress: async () => {
                  try {
                    await ordersService.cancelOrder(orderDetail.id);
                    Alert.alert("Th√†nh c√¥ng", "ƒê√£ h·ªßy ƒë∆°n h√†ng");
                    onClose();
                    onRefresh?.();
                    // Clear selected order ƒë·ªÉ ·∫©n OrderBottomSheet
                    onClearOrder?.();
                  } catch (error: any) {
                    Alert.alert(
                      "L·ªói",
                      `Kh√¥ng th·ªÉ h·ªßy ƒë∆°n h√†ng: ${error.message}`
                    );
                  }
                },
              },
            ]);
            break;
          case "save":
            // Logic l∆∞u ƒë∆°n h√†ng - g·ªçi h√†m t·∫°o ƒë∆°n h√†ng m·ªõi
            await handleCreateOrder();
            break;
          case "print_kitchen":
            // Logic in ch·∫ø bi·∫øn cho ƒë∆°n h√†ng m·ªõi: t·∫°o ƒë∆°n v√† hi·ªÉn th·ªã bill
            await handleKitchenPrintFlow();
            break;
          case "print_bill":
          case "print_temporary":
            // Logic in t·∫°m t√≠nh
            console.log("In t·∫°m t√≠nh cho ƒë∆°n h√†ng:", orderDetail.id);
            break;
          case "payment":
            // M·ªü PaymentModal thay v√¨ confirm tr·ª±c ti·∫øp
            setPaymentModalVisible(true);
            break;
          case "delete_order":
            Alert.alert("X√≥a ƒë∆°n h√†ng", "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ƒë∆°n h√†ng n√†y?", [
              { text: "Kh√¥ng", style: "cancel" },
              {
                text: "C√≥",
                style: "destructive",
                onPress: async () => {
                  try {
                    // Call delete API if available
                    Alert.alert("Th√†nh c√¥ng", "ƒê√£ x√≥a ƒë∆°n h√†ng");
                    onClose();
                    onRefresh?.();
                  } catch (error: any) {
                    Alert.alert(
                      "L·ªói",
                      `Kh√¥ng th·ªÉ x√≥a ƒë∆°n h√†ng: ${error.message}`
                    );
                  }
                },
              },
            ]);
            break;
          case "send_order":
            try {
              await ordersService.sendOrder(orderDetail.id);
              Alert.alert("Th√†nh c√¥ng", "ƒê√£ g·ª≠i ƒë∆°n h√†ng");
              onRefresh?.();
            } catch (error: any) {
              Alert.alert("L·ªói", `Kh√¥ng th·ªÉ g·ª≠i ƒë∆°n h√†ng: ${error.message}`);
            }
            break;
          case "confirm_order":
            try {
              console.log("üîÑ Confirm order:", orderDetail.id);
              await ordersService.confirmOrder(orderDetail.id);
              Alert.alert("Th√†nh c√¥ng", "ƒê√£ x√°c nh·∫≠n ƒë∆°n h√†ng");
              onRefresh?.();
            } catch (error: any) {
              Alert.alert(
                "L·ªói",
                `Kh√¥ng th·ªÉ x√°c nh·∫≠n ƒë∆°n h√†ng: ${error.message}`
              );
            }
            break;
          case "detail":
            // Hi·ªÉn th·ªã chi ti·∫øt ƒë∆°n h√†ng
            console.log("Hi·ªÉn th·ªã chi ti·∫øt ƒë∆°n h√†ng:", orderDetail.id);
            break;
        }
      } catch (error: any) {
        Alert.alert("L·ªói", `Kh√¥ng th·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông: ${error.message}`);
      }
    } else if (!selectedOrder) {
      // Handle actions for create mode (ch∆∞a l∆∞u ƒë∆°n h√†ng)
      switch (action) {
        case "save":
          // G·ªçi h√†m t·∫°o ƒë∆°n h√†ng th·ª±c s·ª± (gi·ªØ l·∫°i ƒë·ªÉ t∆∞∆°ng th√≠ch)
          await handleCreateOrder();
          break;
        case "payment_create":
          // N√∫t "Thanh to√°n" m·ªõi - th·ª±c hi·ªán lu·ªìng: t·∫°o ƒë∆°n ‚Üí in ch·∫ø bi·∫øn ‚Üí chuy·ªÉn chi ti·∫øt ‚Üí m·ªü thanh to√°n
          await handleOptimizedPaymentFlow();
          break;
        case "cancel":
          onClose();
          break;
        case "print_kitchen":
          // Logic in ch·∫ø bi·∫øn cho ƒë∆°n h√†ng m·ªõi: t·∫°o ƒë∆°n v√† hi·ªÉn th·ªã bill
          await handleKitchenPrintFlow();
          break;
        default:
          console.log("Action kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ cho ƒë∆°n h√†ng m·ªõi:", action);
          break;
      }
    }
  };

  const renderActionButtons = () => {
    // N·∫øu kh√¥ng c√≥ m√≥n ƒÉn n√†o th√¨ kh√¥ng hi·ªÉn th·ªã c√°c button action
    if (loading || displayItems.length === 0) return null;

    // X√°c ƒë·ªãnh mode d·ª±a v√†o tr·∫°ng th√°i
    const mode: OrderMode = selectedOrder ? "update" : "create";

    // ƒê∆°n h√†ng ƒë√£ thanh to√°n: ch·ªâ hi·ªÉn th·ªã Chi ti·∫øt v√† In
    const isOrderPaid = selectedOrder ? orderStatus === "paid" : isPaid;
    if (isOrderPaid) {
      return (
        <View style={styles.buttonRow}>
          <TouchableOpacity
            style={[styles.actionButton, styles.detailButton]}
            onPress={() => handleOrderAction("detail")}
          >
            <Ionicons name="eye" size={16} color="#198754" />
            <Text style={styles.detailButtonText}>Chi ti·∫øt</Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={[styles.actionButton, styles.primaryButton]}
            onPress={onPrint}
          >
            <Ionicons name="print" size={16} color="#fff" />
            <Text style={styles.actionButtonText}>In</Text>
          </TouchableOpacity>
        </View>
      );
    }

    // Ki·ªÉm tra th√¥ng tin c·ªßa CustomerInfoModal sau ƒë√≥ th·ª±c hi·ªán chuy·ªÉn sang giao di·ªán c·ªßa tablet ch·ªâ hi·ªÉn th·ªã trong ph·∫ßn phi·∫øu order n·∫±m ·ªü tr√™n section {/* Summary Section */}

    // S·ª≠ d·ª•ng OrderActionButtons component m·ªõi
    return (
      <OrderActionButtons
        order={orderDetail || selectedOrder}
        mode={mode}
        products={displayItems}
        onAction={handleOrderAction}
      />
    );
  };

  // Render right side content for tablet layout
  const renderRightSideContent = () => {
    if (!isTablet) return null;

    return (
      <View style={styles.rightSideContainer}>
        {/* Order Info Section */}
        {selectedOrder && renderOrderDetails()}

        {/* Back to Menu and Customer Info Section for new orders */}
        {selectedTable && !selectedOrder && (
          <View style={styles.tabletBackToMenuAndCustomerInfoContainer}>
            <TouchableOpacity
              style={styles.tabletBackToMenuContainer}
              onPress={onClose}
            >
              <Ionicons name="arrow-back" size={26} color="#198754" />
              <Text style={styles.backToMenuText}>Quay l·∫°i</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.tabletBackToCustomerInfoContainer}
              onPress={() => setCustomerInfoModalVisible(true)}
            >
              <Ionicons name="person-add" size={26} color="#198754" />
              <Text style={styles.customerInfoText}>Kh√°ch h√†ng</Text>
            </TouchableOpacity>
          </View>
        )}

        {/* Summary Section */}
        {displayItems.length > 0 && (
          <View style={styles.tabletSummarySection}>
            <View style={styles.summaryRow}>
              <Text style={styles.summaryLabel}>Ti·ªÅn h√†ng:</Text>
              <Text style={styles.summaryValue}>
                {formatPriceUtil(subtotal)}
              </Text>
            </View>

            <View style={styles.summaryRow}>
              <Text style={styles.summaryLabel}>Ti·ªÅn thu·∫ø:</Text>
              <Text style={styles.summaryValue}>
                {formatPriceUtil(taxAmount)}
              </Text>
            </View>

            <View style={[styles.summaryRow, styles.totalRow]}>
              <Text style={styles.totalLabel}>Ph·∫£i thu:</Text>
              <Text style={styles.totalValue}>
                {formatPriceUtil(totalAmount)}
              </Text>
            </View>
          </View>
        )}

        {/* Action Buttons */}
        <View style={styles.tabletFooter}>{renderActionButtons()}</View>
      </View>
    );
  };

  return (
    <SafeAreaView>
      <Modal
        visible={visible}
        animationType="slide"
        presentationStyle="pageSheet"
        onRequestClose={onClose}
      >
        <View style={styles.container}>
          {/* Header - Same for both layouts */}
          <View style={styles.header}>
            {title ? (
              <Text style={styles.headerTitle}>{title}</Text>
            ) : selectedOrder ? (
              <Text style={styles.headerTitle}>Chi ti·∫øt ƒë∆°n h√†ng</Text>
            ) : selectedTable ? (
              <View>
                <Text style={styles.headerTitle}>Phi·∫øu order</Text>
                <Text style={styles.headerSubtitle}>
                  {selectedTable.name} - {selectedTable.areaName}
                </Text>
              </View>
            ) : (
              <Text style={styles.headerTitle}>T·∫°o ƒë∆°n h√†ng m·ªõi</Text>
            )}
            <View style={styles.headerActions}>
              <TouchableOpacity style={styles.closeButton} onPress={onClose}>
                <Ionicons name="close" size={24} color="#333" />
              </TouchableOpacity>
            </View>
          </View>

          {loading ? (
            <View style={styles.loadingContainer}>
              <ActivityIndicator size="large" color="#198754" />
              <Text style={styles.loadingText}>
                ƒêang t·∫£i chi ti·∫øt ƒë∆°n h√†ng...
              </Text>
            </View>
          ) : (
            <View
              style={
                isTablet
                  ? styles.tabletContentContainer
                  : styles.contentContainer
              }
            >
              {isTablet ? (
                // Tablet Layout: 2-column layout
                <>
                  {/* Left Side: Order Items List (2 parts) */}
                  <View style={styles.leftSideContainer}>
                    {/* Mobile-style order info for tablets - shown above list */}
                    {/* {selectedOrder && (
                      <View style={styles.tabletOrderInfoHeader}>
                        {renderOrderDetails()}
                      </View>
                    )} */}

                    {/* Order Items List */}
                    {displayItems.length > 0 ? (
                      <FlatList
                        data={displayItems}
                        renderItem={renderOrderItem}
                        keyExtractor={(item) => item.id}
                        style={styles.tabletItemsList}
                        contentContainerStyle={styles.itemsListContent}
                        showsVerticalScrollIndicator={true}
                        bounces={true}
                        scrollEnabled={true}
                        nestedScrollEnabled={true}
                        removeClippedSubviews={true}
                      />
                    ) : (
                      <View style={styles.emptyState}>
                        <Ionicons
                          name="restaurant-outline"
                          size={48}
                          color="#ccc"
                        />
                        <Text style={styles.emptyText}>
                          Ch∆∞a c√≥ m√≥n n√†o ƒë∆∞·ª£c ch·ªçn
                        </Text>
                        <Text style={styles.emptySubtext}>
                          Vui l√≤ng ch·ªçn m√≥n t·ª´ th·ª±c ƒë∆°n
                        </Text>
                      </View>
                    )}
                  </View>

                  {/* Right Side: Summary and Actions (1 part) */}
                  {renderRightSideContent()}
                </>
              ) : (
                // Mobile Layout: Keep original structure unchanged
                <>
                  {/* Th√¥ng tin chi ti·∫øt ƒë∆°n h√†ng (ch·ªâ hi·ªÉn th·ªã khi xem t·ª´ tab ƒë∆°n h√†ng) */}
                  {selectedOrder && renderOrderDetails()}

                  {/* Order Items List */}
                  {displayItems.length > 0 ? (
                    <FlatList
                      data={displayItems}
                      renderItem={renderOrderItem}
                      keyExtractor={(item) => item.id}
                      style={styles.itemsList}
                      contentContainerStyle={styles.itemsListContent}
                      showsVerticalScrollIndicator={true}
                      bounces={true}
                      scrollEnabled={true}
                      nestedScrollEnabled={true}
                      removeClippedSubviews={true}
                    />
                  ) : (
                    <View style={styles.emptyState}>
                      <Ionicons
                        name="restaurant-outline"
                        size={48}
                        color="#ccc"
                      />
                      <Text style={styles.emptyText}>
                        Ch∆∞a c√≥ m√≥n n√†o ƒë∆∞·ª£c ch·ªçn
                      </Text>
                      <Text style={styles.emptySubtext}>
                        Vui l√≤ng ch·ªçn m√≥n t·ª´ th·ª±c ƒë∆°n
                      </Text>
                    </View>
                  )}

                  {/* Flex row:  Icon back to menu and Icon customer info */}
                  {selectedTable && !selectedOrder && (
                    <View style={styles.backToMenuAndCustomerInfoContainer}>
                      <TouchableOpacity
                        style={styles.backToMenuContainer}
                        onPress={onClose}
                      >
                        <Ionicons name="arrow-back" size={26} color="#198754" />
                        <Text style={styles.backToMenuText}>Quay l·∫°i</Text>
                      </TouchableOpacity>

                      <TouchableOpacity
                        style={styles.backToCustomerInfoContainer}
                        onPress={() => setCustomerInfoModalVisible(true)}
                      >
                        <Ionicons name="person-add" size={26} color="#198754" />
                        <Text style={styles.customerInfoText}>Kh√°ch h√†ng</Text>
                      </TouchableOpacity>
                    </View>
                  )}

                  {/* Summary Section */}
                  {displayItems.length > 0 && (
                    <View style={styles.summarySection}>
                      <View style={styles.summaryRow}>
                        <Text style={styles.summaryLabel}>Ti·ªÅn h√†ng:</Text>
                        <Text style={styles.summaryValue}>
                          {formatPriceUtil(subtotal)}
                        </Text>
                      </View>

                      <View style={styles.summaryRow}>
                        <Text style={styles.summaryLabel}>Ti·ªÅn thu·∫ø:</Text>
                        <Text style={styles.summaryValue}>
                          {formatPriceUtil(taxAmount)}
                        </Text>
                      </View>

                      <View style={[styles.summaryRow, styles.totalRow]}>
                        <Text style={styles.totalLabel}>Ph·∫£i thu:</Text>
                        <Text style={styles.totalValue}>
                          {formatPriceUtil(totalAmount)}
                        </Text>
                      </View>
                    </View>
                  )}

                  {/* Footer Actions */}
                  <View style={[styles.footer]}>{renderActionButtons()}</View>
                </>
              )}
            </View>
          )}

          {/* Payment Modal */}
          <PaymentModal
            visible={paymentModalVisible}
            totalAmount={totalAmount}
            onClose={() => setPaymentModalVisible(false)}
            onPayment={handlePayment}
            orderId={selectedOrder?.id}
          />

          {/* Customer Info Modal */}
          <CustomerInfoModal
            visible={customerInfoModalVisible}
            initialData={customerInfo}
            onClose={() => setCustomerInfoModalVisible(false)}
            onSave={handleCustomerInfoSave}
            shouldReset={shouldResetCustomerInfo}
          />

          {/* Kitchen Print Modal */}
          {kitchenPrintData && (
            <KitchenPrintModal
              visible={kitchenPrintModalVisible}
              onClose={() => {
                setKitchenPrintModalVisible(false);
                setKitchenPrintData(null);
                onClose(); // ƒê√≥ng UnifiedOrderModal sau khi in xong
              }}
              printData={kitchenPrintData}
            />
          )}
        </View>
      </Modal>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
  },
  contentContainer: {
    flex: 1,
  },
  // New tablet-specific styles
  tabletContentContainer: {
    flex: 1,
    flexDirection: "row",
    backgroundColor: "#f8f9fa",
    // marginTop: isTablet ? 12 : 0,
  },
  leftSideContainer: {
    flex: 1,
    backgroundColor: "#fff",
    marginTop: isTablet ? 12 : 0,
  },
  rightSideContainer: {
    flex: 1,
    backgroundColor: "#f8f9fa",
    borderLeftWidth: 1,
    borderLeftColor: "#e9ecef",
  },
  tabletOrderInfoHeader: {
    backgroundColor: "#fff",
    borderBottomWidth: 1,
    borderBottomColor: "#f0f0f0",
  },
  tabletItemsList: {
    flex: 1,
    backgroundColor: "#fff",
    marginVertical: isTablet ? 12 : 0,
  },
  tabletBackToMenuAndCustomerInfoContainer: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginHorizontal: 16,
    marginVertical: 12,
    paddingVertical: 8,
    borderBottomWidth: 1,
    borderBottomColor: "#e9ecef",
  },
  tabletBackToMenuContainer: {
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "#fff",
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 8,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  tabletBackToCustomerInfoContainer: {
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "#fff",
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 8,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  tabletSummarySection: {
    backgroundColor: "#fff",
    marginHorizontal: 16,
    marginVertical: 12,
    paddingHorizontal: 28,
    paddingVertical: 16,
    // borderRadius: 8,
    // shadowColor: "#000",
    // shadowOffset: { width: 0, height: 1 },
    // shadowOpacity: 0.1,
    // shadowRadius: 2,
    // elevation: 2,
  },
  tabletFooter: {
    paddingHorizontal: 16,
    paddingVertical: 16,
    marginTop: "auto", // Push to bottom
  },
  header: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    paddingHorizontal: 20,
    paddingVertical: isTablet ? 5 : 16,
    backgroundColor: "#fff",
    borderBottomWidth: 1,
    borderBottomColor: "#f0f0f0",
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#333",
    marginBottom: 3,
  },
  headerActions: {
    flexDirection: "row",
    alignItems: "center",
    gap: 8,
  },
  closeButton: {
    padding: 4,
  },
  // Order details styles
  orderInfoContainer: {
    backgroundColor: "#fff",
    marginHorizontal: isTablet ? 16 : 0,
    marginTop: isTablet ? 12 : 0,
    paddingHorizontal: 20,
    paddingVertical: isTablet ? 5 : 10,
    borderBottomWidth: 1,
    borderBottomColor: "#f0f0f0",
  },
  orderInfoRow: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: isTablet ? 2 : 5,
    paddingHorizontal: isTablet ? 12 : 0,
  },
  orderInfoLabel: {
    fontSize: 15,
    color: "#666",
    fontWeight: "500",
  },
  orderInfoValue: {
    fontSize: 15,
    color: "#333",
    fontWeight: "400",
    maxWidth: "60%",
    textAlign: "right",
  },
  statusBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
    alignSelf: "flex-start",
  },
  statusBadgeNew: {
    backgroundColor: "#007bff",
  },
  statusBadgeConfirmed: {
    backgroundColor: "#28a745",
  },
  statusBadgeSent: {
    backgroundColor: "#fd7e14",
  },
  statusBadgePaid: {
    backgroundColor: "#20c997",
  },
  statusBadgeCanceled: {
    backgroundColor: "#dc3545",
  },
  statusText: {
    fontSize: 12,
    fontWeight: "600",
    color: "#fff",
  },
  // Lists styles
  itemsList: {
    flex: 1,
    backgroundColor: "#fff",
  },
  itemsListContent: {
    paddingHorizontal: 20,
    flexGrow: 1,
  },
  // Swipeable item styles
  swipeContainer: {
    backgroundColor: "#fff",
  },
  deleteBackground: {
    position: "absolute",
    right: 0,
    top: 0,
    bottom: 0,
    width: 80,
    backgroundColor: "#dc3545",
    justifyContent: "center",
    alignItems: "center",
  },
  deleteButton: {
    justifyContent: "center",
    alignItems: "center",
    width: 80,
    height: "100%",
  },
  deleteButtonText: {
    color: "#fff",
    fontSize: 12,
    fontWeight: "600",
    marginTop: 4,
  },
  orderItem: {
    backgroundColor: "#fff",
  },
  itemContent: {
    flexDirection: "row",
    alignItems: "center",
    paddingVertical: isTablet ? 0 : 16,
    paddingHorizontal: 0,
    borderBottomWidth: 1,
    borderBottomColor: "#f0f0f0",
    backgroundColor: "#fff",
  },
  itemNumberContainer: {
    alignSelf: "flex-start",
    marginRight: 12,
  },
  itemNumber: {
    fontSize: 12,
    fontWeight: "bold",
    color: "#000",
    lineHeight: 18,
  },
  itemInfo: {
    flex: 1,
    paddingRight: 12,
  },
  itemTitle: {
    fontSize: 14,
    fontWeight: "500",
    color: "#333",
    marginBottom: 4,
  },
  itemPrice: {
    fontSize: 12,
    color: "#666",
  },
  quantityControls: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "#f8f9fa",
    borderRadius: 8,
    paddingHorizontal: 4,
  },
  quantityDisplayOnly: {
    paddingHorizontal: 12,
    paddingVertical: 8,
  },
  quantityButton: {
    padding: 8,
    borderRadius: 6,
  },
  quantityText: {
    fontSize: 16,
    fontWeight: "600",
    color: "#333",
    minWidth: 30,
    textAlign: "center",
  },
  itemTotalContainer: {
    marginLeft: 12,
    minWidth: 80,
    alignItems: "flex-end",
  },
  itemTotal: {
    fontSize: 16,
    fontWeight: "600",
    color: "#198754",
  },
  emptyState: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    paddingHorizontal: 40,
    backgroundColor: "#fff",
  },
  emptyText: {
    fontSize: 16,
    fontWeight: "600",
    color: "#999",
    marginTop: 16,
    textAlign: "center",
  },
  emptySubtext: {
    fontSize: 14,
    color: "#999",
    marginTop: 4,
    textAlign: "center",
  },
  summarySection: {
    backgroundColor: "#fff",
    paddingHorizontal: 20,
    paddingVertical: 16,
    borderTopWidth: 1.5,
    borderTopColor: "#f1f1f1",
  },
  summaryRow: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: 8,
  },
  summaryLabel: {
    fontSize: 16,
    color: "#666",
  },
  summaryValue: {
    fontSize: 16,
    fontWeight: "500",
    color: "#333",
  },
  totalRow: {
    paddingTop: 0,
    marginBottom: 0,
  },
  totalLabel: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#333",
  },
  totalValue: {
    fontSize: 20,
    fontWeight: "bold",
    color: "#198754",
  },
  footer: {
    paddingTop: 16,
    backgroundColor: "#fff",
    borderTopWidth: 1,
    borderTopColor: "#f0f0f0",
    paddingBottom: isTablet ? 10 : 24,
  },
  buttonRow: {
    flexDirection: "row",
    gap: 12,
  },
  buttonRowMultiple: {
    flexDirection: "row",
    gap: 8,
  },
  actionButton: {
    flex: 1,
    flexDirection: "row",
    justifyContent: "center",
    alignItems: "center",
    paddingVertical: 16,
    borderRadius: 12,
    gap: 8,
  },
  primaryButton: {
    backgroundColor: "#198754",
  },
  secondaryButton: {
    backgroundColor: "#fd7e14",
  },
  infoButton: {
    backgroundColor: "#0dcaf0",
  },
  dangerButton: {
    backgroundColor: "#dc3545",
  },
  detailButton: {
    backgroundColor: "#fff",
    borderWidth: 2,
    borderColor: "#198754",
  },
  actionButtonText: {
    fontSize: 14,
    fontWeight: "600",
    color: "#fff",
  },
  detailButtonText: {
    fontSize: 16,
    fontWeight: "600",
    color: "#198754",
  },
  loadingContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    paddingHorizontal: 40,
    backgroundColor: "#fff",
  },
  loadingText: {
    marginTop: 16,
    fontSize: 16,
    color: "#666",
  },
  headerSubtitle: {
    fontSize: 16,
    fontWeight: "600",
    color: "#666",
  },
  backToMenuAndCustomerInfoContainer: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginHorizontal: 20,
    marginVertical: 5,
  },
  backToMenuContainer: {
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "#f8f9fa",
    borderRadius: 5,
    paddingHorizontal: 5,
    paddingVertical: 3,
  },
  backToCustomerInfoContainer: {
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "#f8f9fa",
    borderRadius: 5,
    paddingHorizontal: 5,
    paddingVertical: 3,
  },
  backToMenuText: {
    fontSize: 10,
    fontWeight: "600",
    color: "#198754",
    marginTop: 1,
  },
  customerInfoText: {
    fontSize: 10,
    fontWeight: "600",
    color: "#198754",
    marginTop: 1,
  },
});
