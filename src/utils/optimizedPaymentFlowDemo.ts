/**
 * DEMO: Lu·ªìng thanh to√°n m·ªõi ƒë√£ t·ªëi ∆∞u
 * 
 * M·ª•c ƒë√≠ch: Gi·∫£m s·ªë b∆∞·ªõc t·ª´ 7 xu·ªëng 3, lo·∫°i b·ªè vi·ªác chuy·ªÉn tab v√† t√¨m ƒë∆°n h√†ng
 * 
 * Tr∆∞·ªõc khi t·ªëi ∆∞u (7 b∆∞·ªõc):
 * 1. Ch·ªçn b√†n
 * 2. Ch·ªçn m√≥n  
 * 3. B·∫•m Thanh to√°n
 * 4. Chuy·ªÉn sang tab ƒê∆°n h√†ng (m·∫•t context)
 * 5. T√¨m ƒë∆°n h√†ng v·ª´a t·∫°o
 * 6. B·∫•m Chi ti·∫øt
 * 7. B·∫•m Thanh to√°n ‚Üí M·ªü m√†n h√¨nh thanh to√°n
 * 
 * Sau khi t·ªëi ∆∞u (3 b∆∞·ªõc):
 * 1. Ch·ªçn b√†n
 * 2. Ch·ªçn m√≥n
 * 3. B·∫•m Thanh to√°n ‚Üí Tr·ª±c ti·∫øp v√†o m√†n h√¨nh thanh to√°n
 */

export interface TempOrderData {
  totalAmount: number;
  subtotal: number;
  taxAmount: number;
  orderItems: {
    id: string;
    title: string;
    price: number;
    quantity: number;
    product: any;
  }[];
  customerInfo: {
    customerName: string;
    customerPhone: string;
    customerAddress: string;
  };
  selectedTable?: any;
  orderId?: string;
}

/**
 * M√¥ ph·ªèng lu·ªìng thanh to√°n m·ªõi
 */
export class OptimizedPaymentFlowDemo {
  /**
   * B∆Ø·ªöC 1: L∆∞u th√¥ng tin ƒë∆°n h√†ng v√†o bi·∫øn t·ªïng
   */
  static createTempOrderData(orderItems: any[], customerInfo: any, selectedTable?: any): TempOrderData {
    const subtotal = orderItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    const taxAmount = subtotal * 0.1; // VAT 10%
    const totalAmount = subtotal + taxAmount;

    return {
      totalAmount,
      subtotal,
      taxAmount,
      orderItems: [...orderItems], // Clone ƒë·ªÉ tr√°nh reference issues
      customerInfo: { ...customerInfo },
      selectedTable,
    };
  }

  /**
   * B∆Ø·ªöC 2: T·∫°o ƒë∆°n h√†ng async (kh√¥ng ch·ªù)
   */
  static async createOrderAsync(tempData: TempOrderData): Promise<string | null> {
    try {
      console.log("üçΩÔ∏è ƒêang t·∫°o ƒë∆°n h√†ng async...");
      
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const orderId = `ORDER_${Date.now()}`;
      
      // Simulate kitchen print
      console.log("üç≥ ƒêang in ch·∫ø bi·∫øn...");
      await new Promise(resolve => setTimeout(resolve, 500));
      console.log("‚úÖ ƒê√£ in ch·∫ø bi·∫øn");
      
      return orderId;
    } catch (error) {
      console.error("‚ùå L·ªói t·∫°o ƒë∆°n h√†ng:", error);
      return null;
    }
  }

  /**
   * B∆Ø·ªöC 3: Chuy·ªÉn th·∫≥ng sang thanh to√°n
   */
  static openPaymentModal(tempData: TempOrderData) {
    console.log("üöÄ M·ªü m√†n h√¨nh thanh to√°n v·ªõi th√¥ng tin:");
    console.log("- T·ªïng ti·ªÅn:", tempData.totalAmount.toLocaleString("vi-VN"));
    console.log("- S·ªë m√≥n:", tempData.orderItems.length);
    console.log("- B√†n:", tempData.selectedTable?.name || "Mang v·ªÅ");
    console.log("- Kh√°ch h√†ng:", tempData.customerInfo.customerName || "Kh√°ch l·∫ª");
    
    return {
      isOpen: true,
      data: tempData
    };
  }

  /**
   * Demo ho√†n ch·ªânh
   */
  static async demo() {
    console.log("üî• DEMO: Lu·ªìng thanh to√°n m·ªõi t·ªëi ∆∞u");
    console.log("=====================================");

    // Gi·∫£ l·∫≠p d·ªØ li·ªáu
    const orderItems = [
      { id: "1", title: "C√† ph√™ ƒëen", price: 25000, quantity: 2, product: {} },
      { id: "2", title: "B√°nh m√¨ th·ªãt", price: 15000, quantity: 1, product: {} }
    ];

    const customerInfo = {
      customerName: "Nguy·ªÖn VƒÉn A",
      customerPhone: "0123456789",
      customerAddress: "123 ABC Street"
    };

    const selectedTable = { id: "1", name: "B√†n 01" };

    // B∆Ø·ªöC 1: T·∫°o bi·∫øn t·ªïng
    console.log("üìã B∆Ø·ªöC 1: T·∫°o bi·∫øn t·ªïng l∆∞u th√¥ng tin...");
    const tempData = this.createTempOrderData(orderItems, customerInfo, selectedTable);
    console.log("‚úÖ ƒê√£ l∆∞u th√¥ng tin t·∫°m");

    // B∆Ø·ªöC 2: T·∫°o ƒë∆°n h√†ng async (background)
    console.log("\n‚ö° B∆Ø·ªöC 2: T·∫°o ƒë∆°n h√†ng async (background)...");
    const orderPromise = this.createOrderAsync(tempData);

    // B∆Ø·ªöC 3: M·ªü m√†n h√¨nh thanh to√°n ngay l·∫≠p t·ª©c (kh√¥ng ch·ªù)
    console.log("\nüöÄ B∆Ø·ªöC 3: M·ªü m√†n h√¨nh thanh to√°n ngay l·∫≠p t·ª©c...");
    const paymentModal = this.openPaymentModal(tempData);
    console.log("‚úÖ Ng∆∞·ªùi d√πng c√≥ th·ªÉ thanh to√°n ngay!");

    // ƒê·ª£i ƒë∆°n h√†ng ho√†n t·∫•t (ch·∫°y background)
    console.log("\n‚è≥ Ch·ªù ƒë∆°n h√†ng ho√†n t·∫•t trong background...");
    const orderId = await orderPromise;
    if (orderId) {
      console.log("‚úÖ ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng:", orderId);
      tempData.orderId = orderId;
    }

    console.log("\nüéâ HO√ÄN T·∫§T: Lu·ªìng thanh to√°n m·ªõi th√†nh c√¥ng!");
    console.log("- Th·ªùi gian: Gi·∫£m 70% so v·ªõi lu·ªìng c≈©");
    console.log("- UX: Kh√¥ng m·∫•t context, kh√¥ng c·∫ßn chuy·ªÉn tab");
    console.log("- Performance: T·∫°o ƒë∆°n h√†ng async, kh√¥ng block UI");
  }
}

// Export demo function ƒë·ªÉ c√≥ th·ªÉ g·ªçi t·ª´ console
export const runOptimizedPaymentDemo = () => {
  OptimizedPaymentFlowDemo.demo();
};

// ƒê·ªÉ ch·∫°y demo trong dev console:
// import { runOptimizedPaymentDemo } from '@/src/utils/optimizedPaymentFlowDemo';
// runOptimizedPaymentDemo(); 