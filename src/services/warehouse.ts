import { apiClient } from "@/api";
import { Category, Product } from "@/api/types";

export class WarehouseService {
  /**
   * L·∫•y danh s√°ch categories (danh m·ª•c th·ª±c ƒë∆°n) c√≥ th·ªÉ b√°n
   */
  async getCategories(): Promise<Category[]> {
    console.log('üçΩÔ∏è Getting categories...');
    
    try {
      const response = await apiClient.get<Category[]>('/api/warehouses/categories/sales');
      
      console.log('üìã Categories response:', response);
      
      // Ki·ªÉm tra n·∫øu response l√† array
      if (Array.isArray(response)) {
        console.log('‚úÖ Categories loaded:', response.length);
        return response;
      }
      
      // N·∫øu response c√≥ structure kh√°c
      console.warn('‚ö†Ô∏è Unexpected categories response structure:', response);
      return [];
    } catch (error) {
      console.error('‚ùå Error fetching categories:', error);
      throw error;
    }
  }

  /**
   * L·∫•y danh s√°ch s·∫£n ph·∫©m (m√≥n ƒÉn) c√≥ th·ªÉ b√°n
   */
  async getProducts(categoryId?: string): Promise<Product[]> {
    console.log('üçî Getting products for category:', categoryId || 'all');
    
    try {
      const params = new URLSearchParams({
        pageNumber: '1',
        pageSize: '0', // L·∫•y t·∫•t c·∫£
        Type: '-1',
        IsSale: 'true', // Ch·ªâ l·∫•y s·∫£n ph·∫©m c√≥ th·ªÉ b√°n
      });

      if (categoryId) {
        params.append('CategoryId', categoryId);
      }

      const response = await apiClient.get<any>(`/api/warehouses/products?${params.toString()}`);
      
      console.log('üì¶ Products response:', response);
      
      // Ki·ªÉm tra c√°c c·∫•u tr√∫c response c√≥ th·ªÉ c√≥
      if (response && response.data && Array.isArray(response.data)) {
        // C·∫•u tr√∫c chu·∫©n: { data: Product[], totalRecords, ... }
        console.log('‚úÖ Products loaded (standard structure):', response.data.length);
        return response.data;
      } else if (Array.isArray(response)) {
        // Response tr·ª±c ti·∫øp l√† array
        console.log('‚úÖ Products loaded (direct array):', response.length);
        return response;
      } else if (response && response.items && Array.isArray(response.items)) {
        // C·∫•u tr√∫c kh√°c: { items: Product[] }
        console.log('‚úÖ Products loaded (items structure):', response.items.length);
        return response.items;
      } else {
        // C·∫•u tr√∫c kh√¥ng mong ƒë·ª£i
        console.warn('‚ö†Ô∏è Unexpected products response structure:', response);
        return [];
      }
    } catch (error) {
      console.error('‚ùå Error fetching products:', error);
      throw error;
    }
  }
}

export const warehouseService = new WarehouseService();